
06_usart_tx_with_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000390  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000538  08000538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000558  08000558  00010560  2**0
                  CONTENTS
  4 .ARM          00000000  08000558  08000558  00010560  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000558  08000560  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000558  08000558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010560  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000063a  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001ab  00000000  00000000  00010bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  00010de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a47  00000000  00000000  00010e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000008a9  00000000  00000000  00029887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008aab9  00000000  00000000  0002a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b4be9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000118  00000000  00000000  000b4c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000520 	.word	0x08000520

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000520 	.word	0x08000520

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
void usart2_test(uint8_t *pMsg, uint8_t msgLen);

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate);

int main() {
 80001f8:	b5b0      	push	{r4, r5, r7, lr}
 80001fa:	b092      	sub	sp, #72	; 0x48
 80001fc:	af00      	add	r7, sp, #0

	//clock_init();
	//set_clock_168();

	usart2_tx_init();
 80001fe:	f000 f895 	bl	800032c <usart2_tx_init>

	// initden sonra delay olmalı, direkt iletim yaparsa ilk byte hatalı gidiyor
	// ayrıca sistem baslangıcınca stm kendi sacma bir sey basıyor
	for(int i = 0; i < 1000000; i++);
 8000202:	2300      	movs	r3, #0
 8000204:	647b      	str	r3, [r7, #68]	; 0x44
 8000206:	e002      	b.n	800020e <main+0x16>
 8000208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800020a:	3301      	adds	r3, #1
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
 800020e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000210:	4a43      	ldr	r2, [pc, #268]	; (8000320 <main+0x128>)
 8000212:	4293      	cmp	r3, r2
 8000214:	ddf8      	ble.n	8000208 <main+0x10>
	usart2_write('\n');
 8000216:	200a      	movs	r0, #10
 8000218:	f000 f8d0 	bl	80003bc <usart2_write>

	uint8_t msg[30] = "ESENLIKLER DUNYA\n";
 800021c:	4b41      	ldr	r3, [pc, #260]	; (8000324 <main+0x12c>)
 800021e:	1d3c      	adds	r4, r7, #4
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	682b      	ldr	r3, [r5, #0]
 8000228:	8023      	strh	r3, [r4, #0]
 800022a:	f107 0316 	add.w	r3, r7, #22
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
	usart2_test((uint8_t*)msg, strlen(msg));
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f7ff ffd5 	bl	80001e8 <strlen>
 800023e:	4603      	mov	r3, r0
 8000240:	b2da      	uxtb	r2, r3
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4611      	mov	r1, r2
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f8d0 	bl	80003ec <usart2_test>

	for(int i = 0; i < 1000000; i++);
 800024c:	2300      	movs	r3, #0
 800024e:	643b      	str	r3, [r7, #64]	; 0x40
 8000250:	e002      	b.n	8000258 <main+0x60>
 8000252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000254:	3301      	adds	r3, #1
 8000256:	643b      	str	r3, [r7, #64]	; 0x40
 8000258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800025a:	4a31      	ldr	r2, [pc, #196]	; (8000320 <main+0x128>)
 800025c:	4293      	cmp	r3, r2
 800025e:	ddf8      	ble.n	8000252 <main+0x5a>

	while(1) {
		usart2_write('H');
 8000260:	2048      	movs	r0, #72	; 0x48
 8000262:	f000 f8ab 	bl	80003bc <usart2_write>
		for(int i = 0; i < 100000; i++);
 8000266:	2300      	movs	r3, #0
 8000268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800026a:	e002      	b.n	8000272 <main+0x7a>
 800026c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800026e:	3301      	adds	r3, #1
 8000270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <main+0x130>)
 8000276:	4293      	cmp	r3, r2
 8000278:	ddf8      	ble.n	800026c <main+0x74>
		usart2_write('U');
 800027a:	2055      	movs	r0, #85	; 0x55
 800027c:	f000 f89e 	bl	80003bc <usart2_write>
		for(int i = 0; i < 100000; i++);
 8000280:	2300      	movs	r3, #0
 8000282:	63bb      	str	r3, [r7, #56]	; 0x38
 8000284:	e002      	b.n	800028c <main+0x94>
 8000286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000288:	3301      	adds	r3, #1
 800028a:	63bb      	str	r3, [r7, #56]	; 0x38
 800028c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <main+0x130>)
 8000290:	4293      	cmp	r3, r2
 8000292:	ddf8      	ble.n	8000286 <main+0x8e>
		usart2_write('S');
 8000294:	2053      	movs	r0, #83	; 0x53
 8000296:	f000 f891 	bl	80003bc <usart2_write>
		for(int i = 0; i < 100000; i++);
 800029a:	2300      	movs	r3, #0
 800029c:	637b      	str	r3, [r7, #52]	; 0x34
 800029e:	e002      	b.n	80002a6 <main+0xae>
 80002a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002a2:	3301      	adds	r3, #1
 80002a4:	637b      	str	r3, [r7, #52]	; 0x34
 80002a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002a8:	4a1f      	ldr	r2, [pc, #124]	; (8000328 <main+0x130>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	ddf8      	ble.n	80002a0 <main+0xa8>
		usart2_write('E');
 80002ae:	2045      	movs	r0, #69	; 0x45
 80002b0:	f000 f884 	bl	80003bc <usart2_write>
		for(int i = 0; i < 100000; i++);
 80002b4:	2300      	movs	r3, #0
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
 80002b8:	e002      	b.n	80002c0 <main+0xc8>
 80002ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002bc:	3301      	adds	r3, #1
 80002be:	633b      	str	r3, [r7, #48]	; 0x30
 80002c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002c2:	4a19      	ldr	r2, [pc, #100]	; (8000328 <main+0x130>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	ddf8      	ble.n	80002ba <main+0xc2>
		usart2_write('Y');
 80002c8:	2059      	movs	r0, #89	; 0x59
 80002ca:	f000 f877 	bl	80003bc <usart2_write>
		for(int i = 0; i < 100000; i++);
 80002ce:	2300      	movs	r3, #0
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002d2:	e002      	b.n	80002da <main+0xe2>
 80002d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002d6:	3301      	adds	r3, #1
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002dc:	4a12      	ldr	r2, [pc, #72]	; (8000328 <main+0x130>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	ddf8      	ble.n	80002d4 <main+0xdc>
		usart2_write('I');
 80002e2:	2049      	movs	r0, #73	; 0x49
 80002e4:	f000 f86a 	bl	80003bc <usart2_write>
		for(int i = 0; i < 100000; i++);
 80002e8:	2300      	movs	r3, #0
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80002ec:	e002      	b.n	80002f4 <main+0xfc>
 80002ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002f0:	3301      	adds	r3, #1
 80002f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80002f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002f6:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <main+0x130>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	ddf8      	ble.n	80002ee <main+0xf6>
		usart2_write('N');
 80002fc:	204e      	movs	r0, #78	; 0x4e
 80002fe:	f000 f85d 	bl	80003bc <usart2_write>
		for(int i = 0; i < 100000; i++);
 8000302:	2300      	movs	r3, #0
 8000304:	627b      	str	r3, [r7, #36]	; 0x24
 8000306:	e002      	b.n	800030e <main+0x116>
 8000308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030a:	3301      	adds	r3, #1
 800030c:	627b      	str	r3, [r7, #36]	; 0x24
 800030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <main+0x130>)
 8000312:	4293      	cmp	r3, r2
 8000314:	ddf8      	ble.n	8000308 <main+0x110>
		usart2_write('\n');
 8000316:	200a      	movs	r0, #10
 8000318:	f000 f850 	bl	80003bc <usart2_write>
		usart2_write('H');
 800031c:	e7a0      	b.n	8000260 <main+0x68>
 800031e:	bf00      	nop
 8000320:	000f423f 	.word	0x000f423f
 8000324:	08000538 	.word	0x08000538
 8000328:	0001869f 	.word	0x0001869f

0800032c <usart2_tx_init>:

	}
}


void usart2_tx_init(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	// ----- gpio config -----
		// gpio clock
		RCC->AHB1ENR |= GPIOA_EN;
 8000330:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <usart2_tx_init+0x80>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <usart2_tx_init+0x80>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
		// set gpio AF mode
		GPIOA->MODER = 0xA8000000;  // reset
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <usart2_tx_init+0x84>)
 800033e:	f04f 4228 	mov.w	r2, #2818572288	; 0xa8000000
 8000342:	601a      	str	r2, [r3, #0]

		GPIOA->MODER |= (0x2 << 4); // 0b01 AF - alternate func mod
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <usart2_tx_init+0x84>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a19      	ldr	r2, [pc, #100]	; (80003b0 <usart2_tx_init+0x84>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6013      	str	r3, [r2, #0]
		// set gpio speed
		GPIOA->OSPEEDR = 0x0C000000;  // reset
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <usart2_tx_init+0x84>)
 8000352:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000356:	609a      	str	r2, [r3, #8]
		GPIOA->OSPEEDR |= (0x2 << 4); // 0b10
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <usart2_tx_init+0x84>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <usart2_tx_init+0x84>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6093      	str	r3, [r2, #8]

		// set gpio AF type USART2 - AF7 - b0111
		GPIOA->AFR[0] |= (0x7 << 8); // pin A2 - tx
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <usart2_tx_init+0x84>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <usart2_tx_init+0x84>)
 800036a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800036e:	6213      	str	r3, [r2, #32]
		//GPIOA->AFR[0] |= (0x7 << 12); // 	pin A3- rx

		// ----- uart config -----
		// uart clock en
		RCC->APB1ENR |= USART2_EN;
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <usart2_tx_init+0x80>)
 8000372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <usart2_tx_init+0x80>)
 8000376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037a:	6413      	str	r3, [r2, #64]	; 0x40
		// uart baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800037c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000380:	490c      	ldr	r1, [pc, #48]	; (80003b4 <usart2_tx_init+0x88>)
 8000382:	480d      	ldr	r0, [pc, #52]	; (80003b8 <usart2_tx_init+0x8c>)
 8000384:	f000 f858 	bl	8000438 <uart_set_baudrate>
		// uart transfer direction
		USART2->CR1 = 0x0; 	// reset
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <usart2_tx_init+0x8c>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
		USART2->CR1 |= CR1_TE; // transmit en
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <usart2_tx_init+0x8c>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <usart2_tx_init+0x8c>)
 8000394:	f043 0308 	orr.w	r3, r3, #8
 8000398:	60d3      	str	r3, [r2, #12]
		// en uart
		USART2->CR1 |= CR1_UA;	// uart en
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <usart2_tx_init+0x8c>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <usart2_tx_init+0x8c>)
 80003a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003a4:	60d3      	str	r3, [r2, #12]

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020000 	.word	0x40020000
 80003b4:	00f42400 	.word	0x00f42400
 80003b8:	40004400 	.word	0x40004400

080003bc <usart2_write>:

void usart2_write(uint8_t ch) {
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	// is transmit data reg empty
	while(!(USART2->SR & SR_TXE)) {}
 80003c6:	bf00      	nop
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <usart2_write+0x2c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f9      	beq.n	80003c8 <usart2_write+0xc>
	// write data to tx data reg
	USART2->DR = (ch & 0xFF);
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <usart2_write+0x2c>)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	6053      	str	r3, [r2, #4]
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40004400 	.word	0x40004400

080003ec <usart2_test>:

void usart2_test(uint8_t *pMsg, uint8_t msgLen) {
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < msgLen; i++) {
 80003f8:	2300      	movs	r3, #0
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e00f      	b.n	800041e <usart2_test+0x32>
		// wait for TXE
	    while(!(USART2->SR & SR_TXE));
 80003fe:	bf00      	nop
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <usart2_test+0x48>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f9      	beq.n	8000400 <usart2_test+0x14>

	    // send
	    USART2->DR = (*pMsg++ & 0xFF);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	781a      	ldrb	r2, [r3, #0]
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <usart2_test+0x48>)
 8000416:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < msgLen; i++) {
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	3301      	adds	r3, #1
 800041c:	73fb      	strb	r3, [r7, #15]
 800041e:	7bfa      	ldrb	r2, [r7, #15]
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	429a      	cmp	r2, r3
 8000424:	d3eb      	bcc.n	80003fe <usart2_test+0x12>
	}
}
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40004400 	.word	0x40004400

08000438 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, baudRate);
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	68b8      	ldr	r0, [r7, #8]
 8000448:	f000 f808 	bl	800045c <compute_uart_bd>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	609a      	str	r2, [r3, #8]
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate) {
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (baudRate / 2U))/baudRate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	085a      	lsrs	r2, r3, #1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	441a      	add	r2, r3
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	fbb2 f3f3 	udiv	r3, r2, r3
 8000474:	b29b      	uxth	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000484:	480d      	ldr	r0, [pc, #52]	; (80004bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000486:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000488:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490d      	ldr	r1, [pc, #52]	; (80004c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0a      	ldr	r4, [pc, #40]	; (80004d0 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b2:	f000 f811 	bl	80004d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff fe9f 	bl	80001f8 <main>

080004ba <LoopForever>:

LoopForever:
    b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   r0, =_estack
 80004bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c8:	08000560 	.word	0x08000560
  ldr r2, =_sbss
 80004cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004d0:	2000001c 	.word	0x2000001c

080004d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC_IRQHandler>
	...

080004d8 <__libc_init_array>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	4d0d      	ldr	r5, [pc, #52]	; (8000510 <__libc_init_array+0x38>)
 80004dc:	4c0d      	ldr	r4, [pc, #52]	; (8000514 <__libc_init_array+0x3c>)
 80004de:	1b64      	subs	r4, r4, r5
 80004e0:	10a4      	asrs	r4, r4, #2
 80004e2:	2600      	movs	r6, #0
 80004e4:	42a6      	cmp	r6, r4
 80004e6:	d109      	bne.n	80004fc <__libc_init_array+0x24>
 80004e8:	4d0b      	ldr	r5, [pc, #44]	; (8000518 <__libc_init_array+0x40>)
 80004ea:	4c0c      	ldr	r4, [pc, #48]	; (800051c <__libc_init_array+0x44>)
 80004ec:	f000 f818 	bl	8000520 <_init>
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	10a4      	asrs	r4, r4, #2
 80004f4:	2600      	movs	r6, #0
 80004f6:	42a6      	cmp	r6, r4
 80004f8:	d105      	bne.n	8000506 <__libc_init_array+0x2e>
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000500:	4798      	blx	r3
 8000502:	3601      	adds	r6, #1
 8000504:	e7ee      	b.n	80004e4 <__libc_init_array+0xc>
 8000506:	f855 3b04 	ldr.w	r3, [r5], #4
 800050a:	4798      	blx	r3
 800050c:	3601      	adds	r6, #1
 800050e:	e7f2      	b.n	80004f6 <__libc_init_array+0x1e>
 8000510:	08000558 	.word	0x08000558
 8000514:	08000558 	.word	0x08000558
 8000518:	08000558 	.word	0x08000558
 800051c:	0800055c 	.word	0x0800055c

08000520 <_init>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr

0800052c <_fini>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr
