#include <stdint.h>
#include "stm32f407xx.h"

// USART2 (APB1) TX-> PA2  RX-> PA3
#define USART2_EN		(1U << 17)
#define CR1_TE			(1U << 3)	// UART Transmit en
#define CR1_UA			(1U << 13)	// UART UART en
#define SR_TXE			(1U << 6)

// GPIOA (AHB1)
#define GPIOA_EN		(1U << 0)

#define SYS_FREQ 		((uint32_t)16000000)	// internal high speed osc
#define APB1_CLK		SYS_FREQ

#define UART_BAUDRATE 	((uint32_t)115200)

void usart2_tx_init(void);
void usart2_write(uint8_t ch);
void usart2_test(char *pMsg, uint8_t msgLen);

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate);

uint8_t RCC_GetSYSCLKSource(void);
void clock_init(void);
void set_clock_168(void);

int main() {

	//clock_init();
	//set_clock_168();

	usart2_tx_init();

	for(int i = 0; i < 100000; i++);

	uint8_t msg[30] = "ESENLIKLER DUNYA\n";
	usart2_test((uint8_t *)msg, 30);

	for(int i = 0; i < 1000000; i++);

	while(1) {
		usart2_write('H');
		for(int i = 0; i < 100000; i++);

	}
}


void usart2_tx_init(void) {
	// ----- gpio config -----
		// gpio clock
		RCC->AHB1ENR |= GPIOA_EN;
		// set gpio AF mode
		GPIOA->MODER = 0xA8000000;  // reset

		GPIOA->MODER |= (1U << 5); // 1
		GPIOA->MODER &= ~(1U << 4); // 0
		// set gpio speed
		GPIOA->OSPEEDR = 0x0C000000;  // reset
		GPIOA->OSPEEDR |= (0x2 << 4); // 0b10

		// set gpio AF type USART2 - AF7 - b0111
		GPIOA->AFR[0] |= (0x7 << 8); // pin A2
		//GPIOA->AFR[0] |= (0x7 << 12); // 	pin A3

		// ----- uart config -----
		// uart clock en
		RCC->APB1ENR |= USART2_EN;
		// uart baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
		// uart transfer direction
		USART2->CR1 = 0x0; 	// reset
		USART2->CR1 |= CR1_TE; // transmit en
		// en uart
		USART2->CR1 |= CR1_UA;	// uart en

		USART2->DR = (0x00 & 0xFF);

}

void usart2_write(uint8_t ch) {
	// is transmit data reg empty
	while(!(USART2->SR & SR_TXE)) {}
	// write data to tx data reg
	USART2->DR = (ch & 0xFF);
}

void usart2_test(char *pMsg, uint8_t msgLen) {

	for (uint32_t i = 0; i < msgLen; i++) {


	    // wait for TXE
	    while(!(USART2->SR & SR_TXE));

	    // send
	    USART2->DR = (*pMsg++ & (uint8_t)0xFF);
	}
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate) {
	USARTx->BRR = compute_uart_bd(PeriphClk, baudRate);
	 //USART2->BRR |= (22 << 4);
	 //USART2->BRR |= 13;
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate) {
	return ((PeriphClk + (baudRate / 2U))/baudRate);
}

uint8_t RCC_GetSYSCLKSource(void)
{
	return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS_Msk));

}

void clock_init(void) {
	RCC->CR |= (1U << 0);
	RCC->CFGR = 0x00000000;
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
	RCC->PLLCFGR = 0x24003010UL;
	RCC->CR &= ~(1U << 18);
	RCC->CIR = 0x00000000UL;
}

void set_clock_168(void) {
	uint8_t PLL_M = 8;
	uint16_t PLL_N = 336;
	uint8_t PLL_P = 2;
	uint8_t PLL_Q = 7;

	RCC->CR |= (1U << 16);
	while(!(RCC->CR & (1 << 17)));
	RCC->APB1ENR |= (1 << 28);
	PWR->CR |= (1 << 14);
	RCC->CFGR |= (0 << 4);
	RCC->CFGR |= (5 << 10);
	RCC->CFGR |= (4 << 13);
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24) | (1 << 22);
	RCC->CR |= (1 << 24);
	while(!(RCC->CR & (1 << 25)));
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);

	RCC->CFGR &= ~(3U << 0);
	RCC->CFGR |= (2 << 0);
	while (!(RCC->CFGR & (2U << 2)));


}
