#include "stm32f407xx.h"
#include <stdint.h>
// USART1 APB2
// USART1 TX 	PA9
// USART1 RX	PA10
#define GPIOA_EN	(1U << 0)
#define USART1_EN	(1U << 4)

#define CR1_TE		(1U << 3)  	// Transmit Enable
#define CR1_UE		(1U << 13) 	// Uart Enable
#define SR_TXE		(1U << 7) 	// Uart Transmit data register empty

#define SYS_FREQ  	16000000
#define APB2_CLK	SYS_FREQ

#define UART_BAUDRATE	115200
#define DELAY 			100000

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periph_clk, uint32_t baud_rate);
static uint16_t compute_uart_div(uint32_t periph_clk, uint32_t baud_rate);


void uart1_tx_init(void);
void uart1_write(int ch);


int main()
{
	GPIOA->MODER &= 0xA8000000;
	uart1_tx_init();

	while(1)
	{
		uart1_write('H');


		for(int i = 0; i < DELAY; i++){}
	}
}

void uart1_tx_init(void)
{
	// Clock
	RCC->AHB1ENR |= GPIOA_EN;
	// PA9 alternate function mode
	GPIOA->MODER &= ~(1U << 18);
	GPIOA->MODER |= (1U << 19);

	// PA9 UART mode - AF7
	GPIOA->AFR[1] |= (1U << 4);
	GPIOA->AFR[1] |= (1U << 5);
	GPIOA->AFR[1] |= (1U << 6);
	GPIOA->AFR[1] &= ~(1U << 7);

	// uart config
	// clock
	RCC->APB2ENR |= USART1_EN;
	// baud
	/*
			9600 baudrate at 16Mhz
			B.R = f / 8 x (2 - OVER8) x USARTDIV

			B.R = 9600
			f = 16000000
			OVER8 = 0

			==> USARTDIV 	= 104

			fraction = 0
			mantissa = 104
		*/
	USART1->BRR = (104U << 4);
	//uart_set_baudrate(USART1, APB2_CLK, UART_BAUDRATE);
	// direction
	USART1->CR1 = CR1_TE;
	// enable uart
	USART1->CR1 |= CR1_UE;

}

void uart1_write(int ch)
{
	// transmit data reg boş mu
	while(!(USART1->SR & SR_TXE)){}

	// boşsa gönderilecek mesajı yazdır.
	USART1->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periph_clk, uint32_t baud_rate)
{
	USARTx->BRR = compute_uart_div(periph_clk, baud_rate);
}

static uint16_t compute_uart_div(uint32_t periph_clk, uint32_t baud_rate)
{
	return (periph_clk + (baud_rate / 2U)) / baud_rate;
}
