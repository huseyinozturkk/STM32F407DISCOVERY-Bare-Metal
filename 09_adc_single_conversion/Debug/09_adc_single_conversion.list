
09_adc_single_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  4 .ARM          00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001038c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000055b  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001b9  00000000  00000000  00010917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018121  00000000  00000000  00010b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000986  00000000  00000000  00028cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008794f  00000000  00000000  0002963f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0f8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000cc  00000000  00000000  000b0fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800036c 	.word	0x0800036c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800036c 	.word	0x0800036c

080001e8 <pa1_adc_init>:
#define ADC_CH1		( 1U << 0 )
#define ADC1_EOC	( 1U << 1 )

// PA1 ADC123_IN1
void pa1_adc_init()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

	// en clock access to gpioa
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <pa1_adc_init+0x60>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a15      	ldr	r2, [pc, #84]	; (8000248 <pa1_adc_init+0x60>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30

	// reset gpio moder for gpioa
	GPIOA->MODER &= 0x0;
 80001f8:	4b14      	ldr	r3, [pc, #80]	; (800024c <pa1_adc_init+0x64>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4b13      	ldr	r3, [pc, #76]	; (800024c <pa1_adc_init+0x64>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= 0xA8000000;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <pa1_adc_init+0x64>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a11      	ldr	r2, [pc, #68]	; (800024c <pa1_adc_init+0x64>)
 8000208:	f043 4328 	orr.w	r3, r3, #2818572288	; 0xa8000000
 800020c:	6013      	str	r3, [r2, #0]

	// set pa1 to analog
//	GPIOA->MODER |= (1U << 2);
//	GPIOA->MODER |= (1U << 3);

	GPIOA->MODER |= (0x3 << 2);
 800020e:	4b0f      	ldr	r3, [pc, #60]	; (800024c <pa1_adc_init+0x64>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <pa1_adc_init+0x64>)
 8000214:	f043 030c 	orr.w	r3, r3, #12
 8000218:	6013      	str	r3, [r2, #0]

	// ADC
	// en clock access to adc1
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <pa1_adc_init+0x60>)
 800021c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <pa1_adc_init+0x60>)
 8000220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000224:	6453      	str	r3, [r2, #68]	; 0x44
	// config adc params.
	// sequence -> rank / bir nevi öncelik

	// tek kanal okuma yaptığımız için SQ1
	// conversion sequence start
	ADC1->SQR3 = ADC_CH1;
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <pa1_adc_init+0x68>)
 8000228:	2201      	movs	r2, #1
 800022a:	635a      	str	r2, [r3, #52]	; 0x34

	// tek kanal olduğu için tüm registerı 0 layarak 1 conversion ayarlanır
	// conversion sequence len
	ADC1->SQR1 = 0x00;
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <pa1_adc_init+0x68>)
 800022e:	2200      	movs	r2, #0
 8000230:	62da      	str	r2, [r3, #44]	; 0x2c

	// en adc
	ADC1->CR2 |= ADC_CR2_ADON;
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <pa1_adc_init+0x68>)
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	4a06      	ldr	r2, [pc, #24]	; (8000250 <pa1_adc_init+0x68>)
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	6093      	str	r3, [r2, #8]

}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	40023800 	.word	0x40023800
 800024c:	40020000 	.word	0x40020000
 8000250:	40012000 	.word	0x40012000

08000254 <start_conversion>:

void start_conversion(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <start_conversion+0x1c>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <start_conversion+0x1c>)
 800025e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000262:	6093      	str	r3, [r2, #8]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40012000 	.word	0x40012000

08000274 <adc_read>:

uint32_t adc_read(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	// wait for conv. cmplt
	while(!(ADC1->SR & ADC1_EOC)){}
 8000278:	bf00      	nop
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <adc_read+0x20>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0302 	and.w	r3, r3, #2
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <adc_read+0x6>

	// read data
	return ADC1->DR;
 8000286:	4b03      	ldr	r3, [pc, #12]	; (8000294 <adc_read+0x20>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	40012000 	.word	0x40012000

08000298 <main>:
#include "adc.h"

uint32_t adc_val;

int main()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0

	pa1_adc_init();
 800029e:	f7ff ffa3 	bl	80001e8 <pa1_adc_init>

	while(1)
	{

		// single conv. olduğu için adc okuması yapmadan evvel conv. için başlatma gerekli
		start_conversion();
 80002a2:	f7ff ffd7 	bl	8000254 <start_conversion>
		adc_val = adc_read();
 80002a6:	f7ff ffe5 	bl	8000274 <adc_read>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <main+0x30>)
 80002ae:	6013      	str	r3, [r2, #0]


		// delay
		for (int i = 0; i < 100000; i++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	e003      	b.n	80002be <main+0x26>
		{
			__asm("NOP");
 80002b6:	bf00      	nop
		for (int i = 0; i < 100000; i++)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3301      	adds	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a02      	ldr	r2, [pc, #8]	; (80002cc <main+0x34>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	ddf7      	ble.n	80002b6 <main+0x1e>
		start_conversion();
 80002c6:	e7ec      	b.n	80002a2 <main+0xa>
 80002c8:	2000001c 	.word	0x2000001c
 80002cc:	0001869f 	.word	0x0001869f

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f811 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffc9 	bl	8000298 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800038c 	.word	0x0800038c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	20000020 	.word	0x20000020

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	4d0d      	ldr	r5, [pc, #52]	; (800035c <__libc_init_array+0x38>)
 8000328:	4c0d      	ldr	r4, [pc, #52]	; (8000360 <__libc_init_array+0x3c>)
 800032a:	1b64      	subs	r4, r4, r5
 800032c:	10a4      	asrs	r4, r4, #2
 800032e:	2600      	movs	r6, #0
 8000330:	42a6      	cmp	r6, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	4d0b      	ldr	r5, [pc, #44]	; (8000364 <__libc_init_array+0x40>)
 8000336:	4c0c      	ldr	r4, [pc, #48]	; (8000368 <__libc_init_array+0x44>)
 8000338:	f000 f818 	bl	800036c <_init>
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	2600      	movs	r6, #0
 8000342:	42a6      	cmp	r6, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f855 3b04 	ldr.w	r3, [r5], #4
 800034c:	4798      	blx	r3
 800034e:	3601      	adds	r6, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f855 3b04 	ldr.w	r3, [r5], #4
 8000356:	4798      	blx	r3
 8000358:	3601      	adds	r6, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr
