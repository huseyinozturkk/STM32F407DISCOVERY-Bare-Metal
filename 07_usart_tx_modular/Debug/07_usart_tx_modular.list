
07_usart_tx_modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001414  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080015c4  080015c4  000115c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001690  08001690  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001690  08001690  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001690  08001690  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001690  08001690  00011690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001694  08001694  00011694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ec8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ca  00000000  00000000  00020f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00021428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  00021580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d03  00000000  00000000  00021690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ab1  00000000  00000000  0003b393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d221  00000000  00000000  0003ce44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ca065  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c28  00000000  00000000  000ca0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080015ac 	.word	0x080015ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080015ac 	.word	0x080015ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:





int main() {
 80002a0:	b5b0      	push	{r4, r5, r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

	usart2_tx_init();
 80002a6:	f000 f8eb 	bl	8000480 <usart2_tx_init>

	// initden sonra delay olmalı, direkt iletim yaparsa ilk byte hatalı gidiyor
	// ayrıca sistem baslangıcınca stm kendi sacma bir sey basıyor
	for(int i = 0; i < 1000000; i++);
 80002aa:	2300      	movs	r3, #0
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24
 80002ae:	e002      	b.n	80002b6 <main+0x16>
 80002b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b2:	3301      	adds	r3, #1
 80002b4:	627b      	str	r3, [r7, #36]	; 0x24
 80002b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <main+0x70>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	ddf8      	ble.n	80002b0 <main+0x10>
	usart2_write('\n');
 80002be:	200a      	movs	r0, #10
 80002c0:	f000 f926 	bl	8000510 <usart2_write>

	uint8_t msg[30] = "ESENLIKLER DUNYA\n";
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <main+0x74>)
 80002c6:	463c      	mov	r4, r7
 80002c8:	461d      	mov	r5, r3
 80002ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ce:	682b      	ldr	r3, [r5, #0]
 80002d0:	8023      	strh	r3, [r4, #0]
 80002d2:	f107 0312 	add.w	r3, r7, #18
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
	usart2_test((uint8_t*)msg, strlen(msg));
 80002de:	463b      	mov	r3, r7
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff85 	bl	80001f0 <strlen>
 80002e6:	4603      	mov	r3, r0
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	463b      	mov	r3, r7
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f926 	bl	8000540 <usart2_test>

	for(int i = 0; i < 1000000; i++);
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
 80002f8:	e002      	b.n	8000300 <main+0x60>
 80002fa:	6a3b      	ldr	r3, [r7, #32]
 80002fc:	3301      	adds	r3, #1
 80002fe:	623b      	str	r3, [r7, #32]
 8000300:	6a3b      	ldr	r3, [r7, #32]
 8000302:	4a03      	ldr	r2, [pc, #12]	; (8000310 <main+0x70>)
 8000304:	4293      	cmp	r3, r2
 8000306:	ddf8      	ble.n	80002fa <main+0x5a>

	while(1) {
		printf("HUSEYIN OZTURK\n\r");
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <main+0x78>)
 800030a:	f000 f9c1 	bl	8000690 <iprintf>
 800030e:	e7fb      	b.n	8000308 <main+0x68>
 8000310:	000f423f 	.word	0x000f423f
 8000314:	080015d8 	.word	0x080015d8
 8000318:	080015c4 	.word	0x080015c4

0800031c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	e00a      	b.n	8000344 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800032e:	f3af 8000 	nop.w
 8000332:	4601      	mov	r1, r0
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	60ba      	str	r2, [r7, #8]
 800033a:	b2ca      	uxtb	r2, r1
 800033c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	dbf0      	blt.n	800032e <_read+0x12>
	}

return len;
 800034c:	687b      	ldr	r3, [r7, #4]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b086      	sub	sp, #24
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e009      	b.n	800037c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	60ba      	str	r2, [r7, #8]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f877 	bl	8000464 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	3301      	adds	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	429a      	cmp	r2, r3
 8000382:	dbf1      	blt.n	8000368 <_write+0x12>
	}
	return len;
 8000384:	687b      	ldr	r3, [r7, #4]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <_close>:

int _close(int file)
{
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
	return -1;
 8000396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
 80003ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003b6:	605a      	str	r2, [r3, #4]
	return 0;
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <_isatty>:

int _isatty(int file)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	return 1;
 80003ce:	2301      	movs	r3, #1
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
	return 0;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <_sbrk+0x5c>)
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <_sbrk+0x60>)
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d102      	bne.n	800041a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <_sbrk+0x64>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <_sbrk+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	429a      	cmp	r2, r3
 8000426:	d207      	bcs.n	8000438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000428:	f000 f900 	bl	800062c <__errno>
 800042c:	4603      	mov	r3, r0
 800042e:	220c      	movs	r2, #12
 8000430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	e009      	b.n	800044c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <_sbrk+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <_sbrk+0x64>)
 8000448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044a:	68fb      	ldr	r3, [r7, #12]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20020000 	.word	0x20020000
 8000458:	00000400 	.word	0x00000400
 800045c:	20000080 	.word	0x20000080
 8000460:	20000098 	.word	0x20000098

08000464 <__io_putchar>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate);


int __io_putchar(int ch) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	usart2_write(ch);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f000 f84d 	bl	8000510 <usart2_write>
	return ch;
 8000476:	687b      	ldr	r3, [r7, #4]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <usart2_tx_init>:


void usart2_tx_init(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	// ----- gpio config -----
		// gpio clock
		RCC->AHB1ENR |= GPIOA_EN;
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <usart2_tx_init+0x80>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <usart2_tx_init+0x80>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
		// set gpio AF mode
		GPIOA->MODER = 0xA8000000;  // reset
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <usart2_tx_init+0x84>)
 8000492:	f04f 4228 	mov.w	r2, #2818572288	; 0xa8000000
 8000496:	601a      	str	r2, [r3, #0]

		GPIOA->MODER |= (0x2 << 4); // 0b01 AF - alternate func mod
 8000498:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <usart2_tx_init+0x84>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a19      	ldr	r2, [pc, #100]	; (8000504 <usart2_tx_init+0x84>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6013      	str	r3, [r2, #0]
		// set gpio speed
		GPIOA->OSPEEDR = 0x0C000000;  // reset
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <usart2_tx_init+0x84>)
 80004a6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80004aa:	609a      	str	r2, [r3, #8]
		GPIOA->OSPEEDR |= (0x2 << 4); // 0b10
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <usart2_tx_init+0x84>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <usart2_tx_init+0x84>)
 80004b2:	f043 0320 	orr.w	r3, r3, #32
 80004b6:	6093      	str	r3, [r2, #8]

		// set gpio AF type USART2 - AF7 - b0111
		GPIOA->AFR[0] |= (0x7 << 8); // pin A2 - tx
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <usart2_tx_init+0x84>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <usart2_tx_init+0x84>)
 80004be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004c2:	6213      	str	r3, [r2, #32]
		//GPIOA->AFR[0] |= (0x7 << 12); // 	pin A3- rx

		// ----- uart config -----
		// uart clock en
		RCC->APB1ENR |= USART2_EN;
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <usart2_tx_init+0x80>)
 80004c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <usart2_tx_init+0x80>)
 80004ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ce:	6413      	str	r3, [r2, #64]	; 0x40
		// uart baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d4:	490c      	ldr	r1, [pc, #48]	; (8000508 <usart2_tx_init+0x88>)
 80004d6:	480d      	ldr	r0, [pc, #52]	; (800050c <usart2_tx_init+0x8c>)
 80004d8:	f000 f858 	bl	800058c <uart_set_baudrate>
		// uart transfer direction
		USART2->CR1 = 0x0; 	// reset
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <usart2_tx_init+0x8c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
		USART2->CR1 |= CR1_TE; // transmit en
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <usart2_tx_init+0x8c>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	4a09      	ldr	r2, [pc, #36]	; (800050c <usart2_tx_init+0x8c>)
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	60d3      	str	r3, [r2, #12]
		// en uart
		USART2->CR1 |= CR1_UA;	// uart en
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <usart2_tx_init+0x8c>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <usart2_tx_init+0x8c>)
 80004f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004f8:	60d3      	str	r3, [r2, #12]

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800
 8000504:	40020000 	.word	0x40020000
 8000508:	00f42400 	.word	0x00f42400
 800050c:	40004400 	.word	0x40004400

08000510 <usart2_write>:

void usart2_write(uint8_t ch) {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	// is transmit data reg empty
	while(!(USART2->SR & SR_TXE)) {}
 800051a:	bf00      	nop
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <usart2_write+0x2c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f9      	beq.n	800051c <usart2_write+0xc>
	// write data to tx data reg
	USART2->DR = (ch & 0xFF);
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <usart2_write+0x2c>)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	6053      	str	r3, [r2, #4]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40004400 	.word	0x40004400

08000540 <usart2_test>:

void usart2_test(uint8_t *pMsg, uint8_t msgLen) {
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < msgLen; i++) {
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	e00f      	b.n	8000572 <usart2_test+0x32>
		// wait for TXE
	    while(!(USART2->SR & SR_TXE));
 8000552:	bf00      	nop
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <usart2_test+0x48>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f9      	beq.n	8000554 <usart2_test+0x14>

	    // send
	    USART2->DR = (*pMsg++ & 0xFF);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <usart2_test+0x48>)
 800056a:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < msgLen; i++) {
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	3301      	adds	r3, #1
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	7bfa      	ldrb	r2, [r7, #15]
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	429a      	cmp	r2, r3
 8000578:	d3eb      	bcc.n	8000552 <usart2_test+0x12>
	}
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40004400 	.word	0x40004400

0800058c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, baudRate);
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	68b8      	ldr	r0, [r7, #8]
 800059c:	f000 f808 	bl	80005b0 <compute_uart_bd>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	609a      	str	r2, [r3, #8]
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (baudRate / 2U))/baudRate);
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	085a      	lsrs	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	441a      	add	r2, r3
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c8:	b29b      	uxth	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000606:	f000 f817 	bl	8000638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff fe49 	bl	80002a0 <main>

0800060e <LoopForever>:

LoopForever:
    b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   r0, =_estack
 8000610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800061c:	08001698 	.word	0x08001698
  ldr r2, =_sbss
 8000620:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000624:	20000094 	.word	0x20000094

08000628 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC_IRQHandler>
	...

0800062c <__errno>:
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <__errno+0x8>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000

08000638 <__libc_init_array>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	4d0d      	ldr	r5, [pc, #52]	; (8000670 <__libc_init_array+0x38>)
 800063c:	4c0d      	ldr	r4, [pc, #52]	; (8000674 <__libc_init_array+0x3c>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	2600      	movs	r6, #0
 8000644:	42a6      	cmp	r6, r4
 8000646:	d109      	bne.n	800065c <__libc_init_array+0x24>
 8000648:	4d0b      	ldr	r5, [pc, #44]	; (8000678 <__libc_init_array+0x40>)
 800064a:	4c0c      	ldr	r4, [pc, #48]	; (800067c <__libc_init_array+0x44>)
 800064c:	f000 ffae 	bl	80015ac <_init>
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	2600      	movs	r6, #0
 8000656:	42a6      	cmp	r6, r4
 8000658:	d105      	bne.n	8000666 <__libc_init_array+0x2e>
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000660:	4798      	blx	r3
 8000662:	3601      	adds	r6, #1
 8000664:	e7ee      	b.n	8000644 <__libc_init_array+0xc>
 8000666:	f855 3b04 	ldr.w	r3, [r5], #4
 800066a:	4798      	blx	r3
 800066c:	3601      	adds	r6, #1
 800066e:	e7f2      	b.n	8000656 <__libc_init_array+0x1e>
 8000670:	08001690 	.word	0x08001690
 8000674:	08001690 	.word	0x08001690
 8000678:	08001690 	.word	0x08001690
 800067c:	08001694 	.word	0x08001694

08000680 <memset>:
 8000680:	4402      	add	r2, r0
 8000682:	4603      	mov	r3, r0
 8000684:	4293      	cmp	r3, r2
 8000686:	d100      	bne.n	800068a <memset+0xa>
 8000688:	4770      	bx	lr
 800068a:	f803 1b01 	strb.w	r1, [r3], #1
 800068e:	e7f9      	b.n	8000684 <memset+0x4>

08000690 <iprintf>:
 8000690:	b40f      	push	{r0, r1, r2, r3}
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <iprintf+0x2c>)
 8000694:	b513      	push	{r0, r1, r4, lr}
 8000696:	681c      	ldr	r4, [r3, #0]
 8000698:	b124      	cbz	r4, 80006a4 <iprintf+0x14>
 800069a:	69a3      	ldr	r3, [r4, #24]
 800069c:	b913      	cbnz	r3, 80006a4 <iprintf+0x14>
 800069e:	4620      	mov	r0, r4
 80006a0:	f000 f866 	bl	8000770 <__sinit>
 80006a4:	ab05      	add	r3, sp, #20
 80006a6:	9a04      	ldr	r2, [sp, #16]
 80006a8:	68a1      	ldr	r1, [r4, #8]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	4620      	mov	r0, r4
 80006ae:	f000 f9bd 	bl	8000a2c <_vfiprintf_r>
 80006b2:	b002      	add	sp, #8
 80006b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b8:	b004      	add	sp, #16
 80006ba:	4770      	bx	lr
 80006bc:	20000000 	.word	0x20000000

080006c0 <std>:
 80006c0:	2300      	movs	r3, #0
 80006c2:	b510      	push	{r4, lr}
 80006c4:	4604      	mov	r4, r0
 80006c6:	e9c0 3300 	strd	r3, r3, [r0]
 80006ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ce:	6083      	str	r3, [r0, #8]
 80006d0:	8181      	strh	r1, [r0, #12]
 80006d2:	6643      	str	r3, [r0, #100]	; 0x64
 80006d4:	81c2      	strh	r2, [r0, #14]
 80006d6:	6183      	str	r3, [r0, #24]
 80006d8:	4619      	mov	r1, r3
 80006da:	2208      	movs	r2, #8
 80006dc:	305c      	adds	r0, #92	; 0x5c
 80006de:	f7ff ffcf 	bl	8000680 <memset>
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <std+0x38>)
 80006e4:	6263      	str	r3, [r4, #36]	; 0x24
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <std+0x3c>)
 80006e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <std+0x40>)
 80006ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <std+0x44>)
 80006f0:	6224      	str	r4, [r4, #32]
 80006f2:	6323      	str	r3, [r4, #48]	; 0x30
 80006f4:	bd10      	pop	{r4, pc}
 80006f6:	bf00      	nop
 80006f8:	08000fd5 	.word	0x08000fd5
 80006fc:	08000ff7 	.word	0x08000ff7
 8000700:	0800102f 	.word	0x0800102f
 8000704:	08001053 	.word	0x08001053

08000708 <_cleanup_r>:
 8000708:	4901      	ldr	r1, [pc, #4]	; (8000710 <_cleanup_r+0x8>)
 800070a:	f000 b8af 	b.w	800086c <_fwalk_reent>
 800070e:	bf00      	nop
 8000710:	0800132d 	.word	0x0800132d

08000714 <__sfmoreglue>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	2268      	movs	r2, #104	; 0x68
 8000718:	1e4d      	subs	r5, r1, #1
 800071a:	4355      	muls	r5, r2
 800071c:	460e      	mov	r6, r1
 800071e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000722:	f000 f8e5 	bl	80008f0 <_malloc_r>
 8000726:	4604      	mov	r4, r0
 8000728:	b140      	cbz	r0, 800073c <__sfmoreglue+0x28>
 800072a:	2100      	movs	r1, #0
 800072c:	e9c0 1600 	strd	r1, r6, [r0]
 8000730:	300c      	adds	r0, #12
 8000732:	60a0      	str	r0, [r4, #8]
 8000734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000738:	f7ff ffa2 	bl	8000680 <memset>
 800073c:	4620      	mov	r0, r4
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__sfp_lock_acquire>:
 8000740:	4801      	ldr	r0, [pc, #4]	; (8000748 <__sfp_lock_acquire+0x8>)
 8000742:	f000 b8b3 	b.w	80008ac <__retarget_lock_acquire_recursive>
 8000746:	bf00      	nop
 8000748:	20000085 	.word	0x20000085

0800074c <__sfp_lock_release>:
 800074c:	4801      	ldr	r0, [pc, #4]	; (8000754 <__sfp_lock_release+0x8>)
 800074e:	f000 b8ae 	b.w	80008ae <__retarget_lock_release_recursive>
 8000752:	bf00      	nop
 8000754:	20000085 	.word	0x20000085

08000758 <__sinit_lock_acquire>:
 8000758:	4801      	ldr	r0, [pc, #4]	; (8000760 <__sinit_lock_acquire+0x8>)
 800075a:	f000 b8a7 	b.w	80008ac <__retarget_lock_acquire_recursive>
 800075e:	bf00      	nop
 8000760:	20000086 	.word	0x20000086

08000764 <__sinit_lock_release>:
 8000764:	4801      	ldr	r0, [pc, #4]	; (800076c <__sinit_lock_release+0x8>)
 8000766:	f000 b8a2 	b.w	80008ae <__retarget_lock_release_recursive>
 800076a:	bf00      	nop
 800076c:	20000086 	.word	0x20000086

08000770 <__sinit>:
 8000770:	b510      	push	{r4, lr}
 8000772:	4604      	mov	r4, r0
 8000774:	f7ff fff0 	bl	8000758 <__sinit_lock_acquire>
 8000778:	69a3      	ldr	r3, [r4, #24]
 800077a:	b11b      	cbz	r3, 8000784 <__sinit+0x14>
 800077c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000780:	f7ff bff0 	b.w	8000764 <__sinit_lock_release>
 8000784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000788:	6523      	str	r3, [r4, #80]	; 0x50
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <__sinit+0x68>)
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <__sinit+0x6c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	62a2      	str	r2, [r4, #40]	; 0x28
 8000792:	42a3      	cmp	r3, r4
 8000794:	bf04      	itt	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	61a3      	streq	r3, [r4, #24]
 800079a:	4620      	mov	r0, r4
 800079c:	f000 f820 	bl	80007e0 <__sfp>
 80007a0:	6060      	str	r0, [r4, #4]
 80007a2:	4620      	mov	r0, r4
 80007a4:	f000 f81c 	bl	80007e0 <__sfp>
 80007a8:	60a0      	str	r0, [r4, #8]
 80007aa:	4620      	mov	r0, r4
 80007ac:	f000 f818 	bl	80007e0 <__sfp>
 80007b0:	2200      	movs	r2, #0
 80007b2:	60e0      	str	r0, [r4, #12]
 80007b4:	2104      	movs	r1, #4
 80007b6:	6860      	ldr	r0, [r4, #4]
 80007b8:	f7ff ff82 	bl	80006c0 <std>
 80007bc:	68a0      	ldr	r0, [r4, #8]
 80007be:	2201      	movs	r2, #1
 80007c0:	2109      	movs	r1, #9
 80007c2:	f7ff ff7d 	bl	80006c0 <std>
 80007c6:	68e0      	ldr	r0, [r4, #12]
 80007c8:	2202      	movs	r2, #2
 80007ca:	2112      	movs	r1, #18
 80007cc:	f7ff ff78 	bl	80006c0 <std>
 80007d0:	2301      	movs	r3, #1
 80007d2:	61a3      	str	r3, [r4, #24]
 80007d4:	e7d2      	b.n	800077c <__sinit+0xc>
 80007d6:	bf00      	nop
 80007d8:	080015f8 	.word	0x080015f8
 80007dc:	08000709 	.word	0x08000709

080007e0 <__sfp>:
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e2:	4607      	mov	r7, r0
 80007e4:	f7ff ffac 	bl	8000740 <__sfp_lock_acquire>
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <__sfp+0x84>)
 80007ea:	681e      	ldr	r6, [r3, #0]
 80007ec:	69b3      	ldr	r3, [r6, #24]
 80007ee:	b913      	cbnz	r3, 80007f6 <__sfp+0x16>
 80007f0:	4630      	mov	r0, r6
 80007f2:	f7ff ffbd 	bl	8000770 <__sinit>
 80007f6:	3648      	adds	r6, #72	; 0x48
 80007f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	d503      	bpl.n	8000808 <__sfp+0x28>
 8000800:	6833      	ldr	r3, [r6, #0]
 8000802:	b30b      	cbz	r3, 8000848 <__sfp+0x68>
 8000804:	6836      	ldr	r6, [r6, #0]
 8000806:	e7f7      	b.n	80007f8 <__sfp+0x18>
 8000808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800080c:	b9d5      	cbnz	r5, 8000844 <__sfp+0x64>
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <__sfp+0x88>)
 8000810:	60e3      	str	r3, [r4, #12]
 8000812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000816:	6665      	str	r5, [r4, #100]	; 0x64
 8000818:	f000 f847 	bl	80008aa <__retarget_lock_init_recursive>
 800081c:	f7ff ff96 	bl	800074c <__sfp_lock_release>
 8000820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000828:	6025      	str	r5, [r4, #0]
 800082a:	61a5      	str	r5, [r4, #24]
 800082c:	2208      	movs	r2, #8
 800082e:	4629      	mov	r1, r5
 8000830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000834:	f7ff ff24 	bl	8000680 <memset>
 8000838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800083c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000840:	4620      	mov	r0, r4
 8000842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000844:	3468      	adds	r4, #104	; 0x68
 8000846:	e7d9      	b.n	80007fc <__sfp+0x1c>
 8000848:	2104      	movs	r1, #4
 800084a:	4638      	mov	r0, r7
 800084c:	f7ff ff62 	bl	8000714 <__sfmoreglue>
 8000850:	4604      	mov	r4, r0
 8000852:	6030      	str	r0, [r6, #0]
 8000854:	2800      	cmp	r0, #0
 8000856:	d1d5      	bne.n	8000804 <__sfp+0x24>
 8000858:	f7ff ff78 	bl	800074c <__sfp_lock_release>
 800085c:	230c      	movs	r3, #12
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	e7ee      	b.n	8000840 <__sfp+0x60>
 8000862:	bf00      	nop
 8000864:	080015f8 	.word	0x080015f8
 8000868:	ffff0001 	.word	0xffff0001

0800086c <_fwalk_reent>:
 800086c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000870:	4606      	mov	r6, r0
 8000872:	4688      	mov	r8, r1
 8000874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000878:	2700      	movs	r7, #0
 800087a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800087e:	f1b9 0901 	subs.w	r9, r9, #1
 8000882:	d505      	bpl.n	8000890 <_fwalk_reent+0x24>
 8000884:	6824      	ldr	r4, [r4, #0]
 8000886:	2c00      	cmp	r4, #0
 8000888:	d1f7      	bne.n	800087a <_fwalk_reent+0xe>
 800088a:	4638      	mov	r0, r7
 800088c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000890:	89ab      	ldrh	r3, [r5, #12]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d907      	bls.n	80008a6 <_fwalk_reent+0x3a>
 8000896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800089a:	3301      	adds	r3, #1
 800089c:	d003      	beq.n	80008a6 <_fwalk_reent+0x3a>
 800089e:	4629      	mov	r1, r5
 80008a0:	4630      	mov	r0, r6
 80008a2:	47c0      	blx	r8
 80008a4:	4307      	orrs	r7, r0
 80008a6:	3568      	adds	r5, #104	; 0x68
 80008a8:	e7e9      	b.n	800087e <_fwalk_reent+0x12>

080008aa <__retarget_lock_init_recursive>:
 80008aa:	4770      	bx	lr

080008ac <__retarget_lock_acquire_recursive>:
 80008ac:	4770      	bx	lr

080008ae <__retarget_lock_release_recursive>:
 80008ae:	4770      	bx	lr

080008b0 <sbrk_aligned>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	4e0e      	ldr	r6, [pc, #56]	; (80008ec <sbrk_aligned+0x3c>)
 80008b4:	460c      	mov	r4, r1
 80008b6:	6831      	ldr	r1, [r6, #0]
 80008b8:	4605      	mov	r5, r0
 80008ba:	b911      	cbnz	r1, 80008c2 <sbrk_aligned+0x12>
 80008bc:	f000 fb7a 	bl	8000fb4 <_sbrk_r>
 80008c0:	6030      	str	r0, [r6, #0]
 80008c2:	4621      	mov	r1, r4
 80008c4:	4628      	mov	r0, r5
 80008c6:	f000 fb75 	bl	8000fb4 <_sbrk_r>
 80008ca:	1c43      	adds	r3, r0, #1
 80008cc:	d00a      	beq.n	80008e4 <sbrk_aligned+0x34>
 80008ce:	1cc4      	adds	r4, r0, #3
 80008d0:	f024 0403 	bic.w	r4, r4, #3
 80008d4:	42a0      	cmp	r0, r4
 80008d6:	d007      	beq.n	80008e8 <sbrk_aligned+0x38>
 80008d8:	1a21      	subs	r1, r4, r0
 80008da:	4628      	mov	r0, r5
 80008dc:	f000 fb6a 	bl	8000fb4 <_sbrk_r>
 80008e0:	3001      	adds	r0, #1
 80008e2:	d101      	bne.n	80008e8 <sbrk_aligned+0x38>
 80008e4:	f04f 34ff 	mov.w	r4, #4294967295
 80008e8:	4620      	mov	r0, r4
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	2000008c 	.word	0x2000008c

080008f0 <_malloc_r>:
 80008f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f4:	1ccd      	adds	r5, r1, #3
 80008f6:	f025 0503 	bic.w	r5, r5, #3
 80008fa:	3508      	adds	r5, #8
 80008fc:	2d0c      	cmp	r5, #12
 80008fe:	bf38      	it	cc
 8000900:	250c      	movcc	r5, #12
 8000902:	2d00      	cmp	r5, #0
 8000904:	4607      	mov	r7, r0
 8000906:	db01      	blt.n	800090c <_malloc_r+0x1c>
 8000908:	42a9      	cmp	r1, r5
 800090a:	d905      	bls.n	8000918 <_malloc_r+0x28>
 800090c:	230c      	movs	r3, #12
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	2600      	movs	r6, #0
 8000912:	4630      	mov	r0, r6
 8000914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000918:	4e2e      	ldr	r6, [pc, #184]	; (80009d4 <_malloc_r+0xe4>)
 800091a:	f000 fdbb 	bl	8001494 <__malloc_lock>
 800091e:	6833      	ldr	r3, [r6, #0]
 8000920:	461c      	mov	r4, r3
 8000922:	bb34      	cbnz	r4, 8000972 <_malloc_r+0x82>
 8000924:	4629      	mov	r1, r5
 8000926:	4638      	mov	r0, r7
 8000928:	f7ff ffc2 	bl	80008b0 <sbrk_aligned>
 800092c:	1c43      	adds	r3, r0, #1
 800092e:	4604      	mov	r4, r0
 8000930:	d14d      	bne.n	80009ce <_malloc_r+0xde>
 8000932:	6834      	ldr	r4, [r6, #0]
 8000934:	4626      	mov	r6, r4
 8000936:	2e00      	cmp	r6, #0
 8000938:	d140      	bne.n	80009bc <_malloc_r+0xcc>
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	4631      	mov	r1, r6
 800093e:	4638      	mov	r0, r7
 8000940:	eb04 0803 	add.w	r8, r4, r3
 8000944:	f000 fb36 	bl	8000fb4 <_sbrk_r>
 8000948:	4580      	cmp	r8, r0
 800094a:	d13a      	bne.n	80009c2 <_malloc_r+0xd2>
 800094c:	6821      	ldr	r1, [r4, #0]
 800094e:	3503      	adds	r5, #3
 8000950:	1a6d      	subs	r5, r5, r1
 8000952:	f025 0503 	bic.w	r5, r5, #3
 8000956:	3508      	adds	r5, #8
 8000958:	2d0c      	cmp	r5, #12
 800095a:	bf38      	it	cc
 800095c:	250c      	movcc	r5, #12
 800095e:	4629      	mov	r1, r5
 8000960:	4638      	mov	r0, r7
 8000962:	f7ff ffa5 	bl	80008b0 <sbrk_aligned>
 8000966:	3001      	adds	r0, #1
 8000968:	d02b      	beq.n	80009c2 <_malloc_r+0xd2>
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	442b      	add	r3, r5
 800096e:	6023      	str	r3, [r4, #0]
 8000970:	e00e      	b.n	8000990 <_malloc_r+0xa0>
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	1b52      	subs	r2, r2, r5
 8000976:	d41e      	bmi.n	80009b6 <_malloc_r+0xc6>
 8000978:	2a0b      	cmp	r2, #11
 800097a:	d916      	bls.n	80009aa <_malloc_r+0xba>
 800097c:	1961      	adds	r1, r4, r5
 800097e:	42a3      	cmp	r3, r4
 8000980:	6025      	str	r5, [r4, #0]
 8000982:	bf18      	it	ne
 8000984:	6059      	strne	r1, [r3, #4]
 8000986:	6863      	ldr	r3, [r4, #4]
 8000988:	bf08      	it	eq
 800098a:	6031      	streq	r1, [r6, #0]
 800098c:	5162      	str	r2, [r4, r5]
 800098e:	604b      	str	r3, [r1, #4]
 8000990:	4638      	mov	r0, r7
 8000992:	f104 060b 	add.w	r6, r4, #11
 8000996:	f000 fd83 	bl	80014a0 <__malloc_unlock>
 800099a:	f026 0607 	bic.w	r6, r6, #7
 800099e:	1d23      	adds	r3, r4, #4
 80009a0:	1af2      	subs	r2, r6, r3
 80009a2:	d0b6      	beq.n	8000912 <_malloc_r+0x22>
 80009a4:	1b9b      	subs	r3, r3, r6
 80009a6:	50a3      	str	r3, [r4, r2]
 80009a8:	e7b3      	b.n	8000912 <_malloc_r+0x22>
 80009aa:	6862      	ldr	r2, [r4, #4]
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	bf0c      	ite	eq
 80009b0:	6032      	streq	r2, [r6, #0]
 80009b2:	605a      	strne	r2, [r3, #4]
 80009b4:	e7ec      	b.n	8000990 <_malloc_r+0xa0>
 80009b6:	4623      	mov	r3, r4
 80009b8:	6864      	ldr	r4, [r4, #4]
 80009ba:	e7b2      	b.n	8000922 <_malloc_r+0x32>
 80009bc:	4634      	mov	r4, r6
 80009be:	6876      	ldr	r6, [r6, #4]
 80009c0:	e7b9      	b.n	8000936 <_malloc_r+0x46>
 80009c2:	230c      	movs	r3, #12
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4638      	mov	r0, r7
 80009c8:	f000 fd6a 	bl	80014a0 <__malloc_unlock>
 80009cc:	e7a1      	b.n	8000912 <_malloc_r+0x22>
 80009ce:	6025      	str	r5, [r4, #0]
 80009d0:	e7de      	b.n	8000990 <_malloc_r+0xa0>
 80009d2:	bf00      	nop
 80009d4:	20000088 	.word	0x20000088

080009d8 <__sfputc_r>:
 80009d8:	6893      	ldr	r3, [r2, #8]
 80009da:	3b01      	subs	r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	b410      	push	{r4}
 80009e0:	6093      	str	r3, [r2, #8]
 80009e2:	da08      	bge.n	80009f6 <__sfputc_r+0x1e>
 80009e4:	6994      	ldr	r4, [r2, #24]
 80009e6:	42a3      	cmp	r3, r4
 80009e8:	db01      	blt.n	80009ee <__sfputc_r+0x16>
 80009ea:	290a      	cmp	r1, #10
 80009ec:	d103      	bne.n	80009f6 <__sfputc_r+0x1e>
 80009ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009f2:	f000 bb33 	b.w	800105c <__swbuf_r>
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	1c58      	adds	r0, r3, #1
 80009fa:	6010      	str	r0, [r2, #0]
 80009fc:	7019      	strb	r1, [r3, #0]
 80009fe:	4608      	mov	r0, r1
 8000a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <__sfputs_r>:
 8000a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a08:	4606      	mov	r6, r0
 8000a0a:	460f      	mov	r7, r1
 8000a0c:	4614      	mov	r4, r2
 8000a0e:	18d5      	adds	r5, r2, r3
 8000a10:	42ac      	cmp	r4, r5
 8000a12:	d101      	bne.n	8000a18 <__sfputs_r+0x12>
 8000a14:	2000      	movs	r0, #0
 8000a16:	e007      	b.n	8000a28 <__sfputs_r+0x22>
 8000a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a1c:	463a      	mov	r2, r7
 8000a1e:	4630      	mov	r0, r6
 8000a20:	f7ff ffda 	bl	80009d8 <__sfputc_r>
 8000a24:	1c43      	adds	r3, r0, #1
 8000a26:	d1f3      	bne.n	8000a10 <__sfputs_r+0xa>
 8000a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a2c <_vfiprintf_r>:
 8000a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a30:	460d      	mov	r5, r1
 8000a32:	b09d      	sub	sp, #116	; 0x74
 8000a34:	4614      	mov	r4, r2
 8000a36:	4698      	mov	r8, r3
 8000a38:	4606      	mov	r6, r0
 8000a3a:	b118      	cbz	r0, 8000a44 <_vfiprintf_r+0x18>
 8000a3c:	6983      	ldr	r3, [r0, #24]
 8000a3e:	b90b      	cbnz	r3, 8000a44 <_vfiprintf_r+0x18>
 8000a40:	f7ff fe96 	bl	8000770 <__sinit>
 8000a44:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <_vfiprintf_r+0x240>)
 8000a46:	429d      	cmp	r5, r3
 8000a48:	d11b      	bne.n	8000a82 <_vfiprintf_r+0x56>
 8000a4a:	6875      	ldr	r5, [r6, #4]
 8000a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a4e:	07d9      	lsls	r1, r3, #31
 8000a50:	d405      	bmi.n	8000a5e <_vfiprintf_r+0x32>
 8000a52:	89ab      	ldrh	r3, [r5, #12]
 8000a54:	059a      	lsls	r2, r3, #22
 8000a56:	d402      	bmi.n	8000a5e <_vfiprintf_r+0x32>
 8000a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a5a:	f7ff ff27 	bl	80008ac <__retarget_lock_acquire_recursive>
 8000a5e:	89ab      	ldrh	r3, [r5, #12]
 8000a60:	071b      	lsls	r3, r3, #28
 8000a62:	d501      	bpl.n	8000a68 <_vfiprintf_r+0x3c>
 8000a64:	692b      	ldr	r3, [r5, #16]
 8000a66:	b9eb      	cbnz	r3, 8000aa4 <_vfiprintf_r+0x78>
 8000a68:	4629      	mov	r1, r5
 8000a6a:	4630      	mov	r0, r6
 8000a6c:	f000 fb5a 	bl	8001124 <__swsetup_r>
 8000a70:	b1c0      	cbz	r0, 8000aa4 <_vfiprintf_r+0x78>
 8000a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a74:	07dc      	lsls	r4, r3, #31
 8000a76:	d50e      	bpl.n	8000a96 <_vfiprintf_r+0x6a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	b01d      	add	sp, #116	; 0x74
 8000a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a82:	4b7b      	ldr	r3, [pc, #492]	; (8000c70 <_vfiprintf_r+0x244>)
 8000a84:	429d      	cmp	r5, r3
 8000a86:	d101      	bne.n	8000a8c <_vfiprintf_r+0x60>
 8000a88:	68b5      	ldr	r5, [r6, #8]
 8000a8a:	e7df      	b.n	8000a4c <_vfiprintf_r+0x20>
 8000a8c:	4b79      	ldr	r3, [pc, #484]	; (8000c74 <_vfiprintf_r+0x248>)
 8000a8e:	429d      	cmp	r5, r3
 8000a90:	bf08      	it	eq
 8000a92:	68f5      	ldreq	r5, [r6, #12]
 8000a94:	e7da      	b.n	8000a4c <_vfiprintf_r+0x20>
 8000a96:	89ab      	ldrh	r3, [r5, #12]
 8000a98:	0598      	lsls	r0, r3, #22
 8000a9a:	d4ed      	bmi.n	8000a78 <_vfiprintf_r+0x4c>
 8000a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a9e:	f7ff ff06 	bl	80008ae <__retarget_lock_release_recursive>
 8000aa2:	e7e9      	b.n	8000a78 <_vfiprintf_r+0x4c>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ab2:	2330      	movs	r3, #48	; 0x30
 8000ab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c78 <_vfiprintf_r+0x24c>
 8000ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000abc:	f04f 0901 	mov.w	r9, #1
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ac8:	b10a      	cbz	r2, 8000ace <_vfiprintf_r+0xa2>
 8000aca:	2a25      	cmp	r2, #37	; 0x25
 8000acc:	d1f9      	bne.n	8000ac2 <_vfiprintf_r+0x96>
 8000ace:	ebba 0b04 	subs.w	fp, sl, r4
 8000ad2:	d00b      	beq.n	8000aec <_vfiprintf_r+0xc0>
 8000ad4:	465b      	mov	r3, fp
 8000ad6:	4622      	mov	r2, r4
 8000ad8:	4629      	mov	r1, r5
 8000ada:	4630      	mov	r0, r6
 8000adc:	f7ff ff93 	bl	8000a06 <__sfputs_r>
 8000ae0:	3001      	adds	r0, #1
 8000ae2:	f000 80aa 	beq.w	8000c3a <_vfiprintf_r+0x20e>
 8000ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ae8:	445a      	add	r2, fp
 8000aea:	9209      	str	r2, [sp, #36]	; 0x24
 8000aec:	f89a 3000 	ldrb.w	r3, [sl]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f000 80a2 	beq.w	8000c3a <_vfiprintf_r+0x20e>
 8000af6:	2300      	movs	r3, #0
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b00:	f10a 0a01 	add.w	sl, sl, #1
 8000b04:	9304      	str	r3, [sp, #16]
 8000b06:	9307      	str	r3, [sp, #28]
 8000b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8000b0e:	4654      	mov	r4, sl
 8000b10:	2205      	movs	r2, #5
 8000b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b16:	4858      	ldr	r0, [pc, #352]	; (8000c78 <_vfiprintf_r+0x24c>)
 8000b18:	f7ff fb72 	bl	8000200 <memchr>
 8000b1c:	9a04      	ldr	r2, [sp, #16]
 8000b1e:	b9d8      	cbnz	r0, 8000b58 <_vfiprintf_r+0x12c>
 8000b20:	06d1      	lsls	r1, r2, #27
 8000b22:	bf44      	itt	mi
 8000b24:	2320      	movmi	r3, #32
 8000b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b2a:	0713      	lsls	r3, r2, #28
 8000b2c:	bf44      	itt	mi
 8000b2e:	232b      	movmi	r3, #43	; 0x2b
 8000b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b34:	f89a 3000 	ldrb.w	r3, [sl]
 8000b38:	2b2a      	cmp	r3, #42	; 0x2a
 8000b3a:	d015      	beq.n	8000b68 <_vfiprintf_r+0x13c>
 8000b3c:	9a07      	ldr	r2, [sp, #28]
 8000b3e:	4654      	mov	r4, sl
 8000b40:	2000      	movs	r0, #0
 8000b42:	f04f 0c0a 	mov.w	ip, #10
 8000b46:	4621      	mov	r1, r4
 8000b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b4c:	3b30      	subs	r3, #48	; 0x30
 8000b4e:	2b09      	cmp	r3, #9
 8000b50:	d94e      	bls.n	8000bf0 <_vfiprintf_r+0x1c4>
 8000b52:	b1b0      	cbz	r0, 8000b82 <_vfiprintf_r+0x156>
 8000b54:	9207      	str	r2, [sp, #28]
 8000b56:	e014      	b.n	8000b82 <_vfiprintf_r+0x156>
 8000b58:	eba0 0308 	sub.w	r3, r0, r8
 8000b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	9304      	str	r3, [sp, #16]
 8000b64:	46a2      	mov	sl, r4
 8000b66:	e7d2      	b.n	8000b0e <_vfiprintf_r+0xe2>
 8000b68:	9b03      	ldr	r3, [sp, #12]
 8000b6a:	1d19      	adds	r1, r3, #4
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	9103      	str	r1, [sp, #12]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bfbb      	ittet	lt
 8000b74:	425b      	neglt	r3, r3
 8000b76:	f042 0202 	orrlt.w	r2, r2, #2
 8000b7a:	9307      	strge	r3, [sp, #28]
 8000b7c:	9307      	strlt	r3, [sp, #28]
 8000b7e:	bfb8      	it	lt
 8000b80:	9204      	strlt	r2, [sp, #16]
 8000b82:	7823      	ldrb	r3, [r4, #0]
 8000b84:	2b2e      	cmp	r3, #46	; 0x2e
 8000b86:	d10c      	bne.n	8000ba2 <_vfiprintf_r+0x176>
 8000b88:	7863      	ldrb	r3, [r4, #1]
 8000b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8000b8c:	d135      	bne.n	8000bfa <_vfiprintf_r+0x1ce>
 8000b8e:	9b03      	ldr	r3, [sp, #12]
 8000b90:	1d1a      	adds	r2, r3, #4
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	9203      	str	r2, [sp, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bfb8      	it	lt
 8000b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b9e:	3402      	adds	r4, #2
 8000ba0:	9305      	str	r3, [sp, #20]
 8000ba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c88 <_vfiprintf_r+0x25c>
 8000ba6:	7821      	ldrb	r1, [r4, #0]
 8000ba8:	2203      	movs	r2, #3
 8000baa:	4650      	mov	r0, sl
 8000bac:	f7ff fb28 	bl	8000200 <memchr>
 8000bb0:	b140      	cbz	r0, 8000bc4 <_vfiprintf_r+0x198>
 8000bb2:	2340      	movs	r3, #64	; 0x40
 8000bb4:	eba0 000a 	sub.w	r0, r0, sl
 8000bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bbc:	9b04      	ldr	r3, [sp, #16]
 8000bbe:	4303      	orrs	r3, r0
 8000bc0:	3401      	adds	r4, #1
 8000bc2:	9304      	str	r3, [sp, #16]
 8000bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bc8:	482c      	ldr	r0, [pc, #176]	; (8000c7c <_vfiprintf_r+0x250>)
 8000bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000bce:	2206      	movs	r2, #6
 8000bd0:	f7ff fb16 	bl	8000200 <memchr>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d03f      	beq.n	8000c58 <_vfiprintf_r+0x22c>
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <_vfiprintf_r+0x254>)
 8000bda:	bb1b      	cbnz	r3, 8000c24 <_vfiprintf_r+0x1f8>
 8000bdc:	9b03      	ldr	r3, [sp, #12]
 8000bde:	3307      	adds	r3, #7
 8000be0:	f023 0307 	bic.w	r3, r3, #7
 8000be4:	3308      	adds	r3, #8
 8000be6:	9303      	str	r3, [sp, #12]
 8000be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bea:	443b      	add	r3, r7
 8000bec:	9309      	str	r3, [sp, #36]	; 0x24
 8000bee:	e767      	b.n	8000ac0 <_vfiprintf_r+0x94>
 8000bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bf4:	460c      	mov	r4, r1
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	e7a5      	b.n	8000b46 <_vfiprintf_r+0x11a>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	3401      	adds	r4, #1
 8000bfe:	9305      	str	r3, [sp, #20]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 0c0a 	mov.w	ip, #10
 8000c06:	4620      	mov	r0, r4
 8000c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c0c:	3a30      	subs	r2, #48	; 0x30
 8000c0e:	2a09      	cmp	r2, #9
 8000c10:	d903      	bls.n	8000c1a <_vfiprintf_r+0x1ee>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0c5      	beq.n	8000ba2 <_vfiprintf_r+0x176>
 8000c16:	9105      	str	r1, [sp, #20]
 8000c18:	e7c3      	b.n	8000ba2 <_vfiprintf_r+0x176>
 8000c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c1e:	4604      	mov	r4, r0
 8000c20:	2301      	movs	r3, #1
 8000c22:	e7f0      	b.n	8000c06 <_vfiprintf_r+0x1da>
 8000c24:	ab03      	add	r3, sp, #12
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	462a      	mov	r2, r5
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <_vfiprintf_r+0x258>)
 8000c2c:	a904      	add	r1, sp, #16
 8000c2e:	4630      	mov	r0, r6
 8000c30:	f3af 8000 	nop.w
 8000c34:	4607      	mov	r7, r0
 8000c36:	1c78      	adds	r0, r7, #1
 8000c38:	d1d6      	bne.n	8000be8 <_vfiprintf_r+0x1bc>
 8000c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c3c:	07d9      	lsls	r1, r3, #31
 8000c3e:	d405      	bmi.n	8000c4c <_vfiprintf_r+0x220>
 8000c40:	89ab      	ldrh	r3, [r5, #12]
 8000c42:	059a      	lsls	r2, r3, #22
 8000c44:	d402      	bmi.n	8000c4c <_vfiprintf_r+0x220>
 8000c46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c48:	f7ff fe31 	bl	80008ae <__retarget_lock_release_recursive>
 8000c4c:	89ab      	ldrh	r3, [r5, #12]
 8000c4e:	065b      	lsls	r3, r3, #25
 8000c50:	f53f af12 	bmi.w	8000a78 <_vfiprintf_r+0x4c>
 8000c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c56:	e711      	b.n	8000a7c <_vfiprintf_r+0x50>
 8000c58:	ab03      	add	r3, sp, #12
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	462a      	mov	r2, r5
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <_vfiprintf_r+0x258>)
 8000c60:	a904      	add	r1, sp, #16
 8000c62:	4630      	mov	r0, r6
 8000c64:	f000 f880 	bl	8000d68 <_printf_i>
 8000c68:	e7e4      	b.n	8000c34 <_vfiprintf_r+0x208>
 8000c6a:	bf00      	nop
 8000c6c:	0800161c 	.word	0x0800161c
 8000c70:	0800163c 	.word	0x0800163c
 8000c74:	080015fc 	.word	0x080015fc
 8000c78:	0800165c 	.word	0x0800165c
 8000c7c:	08001666 	.word	0x08001666
 8000c80:	00000000 	.word	0x00000000
 8000c84:	08000a07 	.word	0x08000a07
 8000c88:	08001662 	.word	0x08001662

08000c8c <_printf_common>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	4616      	mov	r6, r2
 8000c92:	4699      	mov	r9, r3
 8000c94:	688a      	ldr	r2, [r1, #8]
 8000c96:	690b      	ldr	r3, [r1, #16]
 8000c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	bfb8      	it	lt
 8000ca0:	4613      	movlt	r3, r2
 8000ca2:	6033      	str	r3, [r6, #0]
 8000ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000ca8:	4607      	mov	r7, r0
 8000caa:	460c      	mov	r4, r1
 8000cac:	b10a      	cbz	r2, 8000cb2 <_printf_common+0x26>
 8000cae:	3301      	adds	r3, #1
 8000cb0:	6033      	str	r3, [r6, #0]
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	0699      	lsls	r1, r3, #26
 8000cb6:	bf42      	ittt	mi
 8000cb8:	6833      	ldrmi	r3, [r6, #0]
 8000cba:	3302      	addmi	r3, #2
 8000cbc:	6033      	strmi	r3, [r6, #0]
 8000cbe:	6825      	ldr	r5, [r4, #0]
 8000cc0:	f015 0506 	ands.w	r5, r5, #6
 8000cc4:	d106      	bne.n	8000cd4 <_printf_common+0x48>
 8000cc6:	f104 0a19 	add.w	sl, r4, #25
 8000cca:	68e3      	ldr	r3, [r4, #12]
 8000ccc:	6832      	ldr	r2, [r6, #0]
 8000cce:	1a9b      	subs	r3, r3, r2
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	dc26      	bgt.n	8000d22 <_printf_common+0x96>
 8000cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cd8:	1e13      	subs	r3, r2, #0
 8000cda:	6822      	ldr	r2, [r4, #0]
 8000cdc:	bf18      	it	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	0692      	lsls	r2, r2, #26
 8000ce2:	d42b      	bmi.n	8000d3c <_printf_common+0xb0>
 8000ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ce8:	4649      	mov	r1, r9
 8000cea:	4638      	mov	r0, r7
 8000cec:	47c0      	blx	r8
 8000cee:	3001      	adds	r0, #1
 8000cf0:	d01e      	beq.n	8000d30 <_printf_common+0xa4>
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	68e5      	ldr	r5, [r4, #12]
 8000cf6:	6832      	ldr	r2, [r6, #0]
 8000cf8:	f003 0306 	and.w	r3, r3, #6
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	bf08      	it	eq
 8000d00:	1aad      	subeq	r5, r5, r2
 8000d02:	68a3      	ldr	r3, [r4, #8]
 8000d04:	6922      	ldr	r2, [r4, #16]
 8000d06:	bf0c      	ite	eq
 8000d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d0c:	2500      	movne	r5, #0
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	bfc4      	itt	gt
 8000d12:	1a9b      	subgt	r3, r3, r2
 8000d14:	18ed      	addgt	r5, r5, r3
 8000d16:	2600      	movs	r6, #0
 8000d18:	341a      	adds	r4, #26
 8000d1a:	42b5      	cmp	r5, r6
 8000d1c:	d11a      	bne.n	8000d54 <_printf_common+0xc8>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e008      	b.n	8000d34 <_printf_common+0xa8>
 8000d22:	2301      	movs	r3, #1
 8000d24:	4652      	mov	r2, sl
 8000d26:	4649      	mov	r1, r9
 8000d28:	4638      	mov	r0, r7
 8000d2a:	47c0      	blx	r8
 8000d2c:	3001      	adds	r0, #1
 8000d2e:	d103      	bne.n	8000d38 <_printf_common+0xac>
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	3501      	adds	r5, #1
 8000d3a:	e7c6      	b.n	8000cca <_printf_common+0x3e>
 8000d3c:	18e1      	adds	r1, r4, r3
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	2030      	movs	r0, #48	; 0x30
 8000d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d46:	4422      	add	r2, r4
 8000d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d50:	3302      	adds	r3, #2
 8000d52:	e7c7      	b.n	8000ce4 <_printf_common+0x58>
 8000d54:	2301      	movs	r3, #1
 8000d56:	4622      	mov	r2, r4
 8000d58:	4649      	mov	r1, r9
 8000d5a:	4638      	mov	r0, r7
 8000d5c:	47c0      	blx	r8
 8000d5e:	3001      	adds	r0, #1
 8000d60:	d0e6      	beq.n	8000d30 <_printf_common+0xa4>
 8000d62:	3601      	adds	r6, #1
 8000d64:	e7d9      	b.n	8000d1a <_printf_common+0x8e>
	...

08000d68 <_printf_i>:
 8000d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	7e0f      	ldrb	r7, [r1, #24]
 8000d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d70:	2f78      	cmp	r7, #120	; 0x78
 8000d72:	4691      	mov	r9, r2
 8000d74:	4680      	mov	r8, r0
 8000d76:	460c      	mov	r4, r1
 8000d78:	469a      	mov	sl, r3
 8000d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d7e:	d807      	bhi.n	8000d90 <_printf_i+0x28>
 8000d80:	2f62      	cmp	r7, #98	; 0x62
 8000d82:	d80a      	bhi.n	8000d9a <_printf_i+0x32>
 8000d84:	2f00      	cmp	r7, #0
 8000d86:	f000 80d8 	beq.w	8000f3a <_printf_i+0x1d2>
 8000d8a:	2f58      	cmp	r7, #88	; 0x58
 8000d8c:	f000 80a3 	beq.w	8000ed6 <_printf_i+0x16e>
 8000d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d98:	e03a      	b.n	8000e10 <_printf_i+0xa8>
 8000d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d9e:	2b15      	cmp	r3, #21
 8000da0:	d8f6      	bhi.n	8000d90 <_printf_i+0x28>
 8000da2:	a101      	add	r1, pc, #4	; (adr r1, 8000da8 <_printf_i+0x40>)
 8000da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000da8:	08000e01 	.word	0x08000e01
 8000dac:	08000e15 	.word	0x08000e15
 8000db0:	08000d91 	.word	0x08000d91
 8000db4:	08000d91 	.word	0x08000d91
 8000db8:	08000d91 	.word	0x08000d91
 8000dbc:	08000d91 	.word	0x08000d91
 8000dc0:	08000e15 	.word	0x08000e15
 8000dc4:	08000d91 	.word	0x08000d91
 8000dc8:	08000d91 	.word	0x08000d91
 8000dcc:	08000d91 	.word	0x08000d91
 8000dd0:	08000d91 	.word	0x08000d91
 8000dd4:	08000f21 	.word	0x08000f21
 8000dd8:	08000e45 	.word	0x08000e45
 8000ddc:	08000f03 	.word	0x08000f03
 8000de0:	08000d91 	.word	0x08000d91
 8000de4:	08000d91 	.word	0x08000d91
 8000de8:	08000f43 	.word	0x08000f43
 8000dec:	08000d91 	.word	0x08000d91
 8000df0:	08000e45 	.word	0x08000e45
 8000df4:	08000d91 	.word	0x08000d91
 8000df8:	08000d91 	.word	0x08000d91
 8000dfc:	08000f0b 	.word	0x08000f0b
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	1d1a      	adds	r2, r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	602a      	str	r2, [r5, #0]
 8000e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e10:	2301      	movs	r3, #1
 8000e12:	e0a3      	b.n	8000f5c <_printf_i+0x1f4>
 8000e14:	6820      	ldr	r0, [r4, #0]
 8000e16:	6829      	ldr	r1, [r5, #0]
 8000e18:	0606      	lsls	r6, r0, #24
 8000e1a:	f101 0304 	add.w	r3, r1, #4
 8000e1e:	d50a      	bpl.n	8000e36 <_printf_i+0xce>
 8000e20:	680e      	ldr	r6, [r1, #0]
 8000e22:	602b      	str	r3, [r5, #0]
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	da03      	bge.n	8000e30 <_printf_i+0xc8>
 8000e28:	232d      	movs	r3, #45	; 0x2d
 8000e2a:	4276      	negs	r6, r6
 8000e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e30:	485e      	ldr	r0, [pc, #376]	; (8000fac <_printf_i+0x244>)
 8000e32:	230a      	movs	r3, #10
 8000e34:	e019      	b.n	8000e6a <_printf_i+0x102>
 8000e36:	680e      	ldr	r6, [r1, #0]
 8000e38:	602b      	str	r3, [r5, #0]
 8000e3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e3e:	bf18      	it	ne
 8000e40:	b236      	sxthne	r6, r6
 8000e42:	e7ef      	b.n	8000e24 <_printf_i+0xbc>
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	6820      	ldr	r0, [r4, #0]
 8000e48:	1d19      	adds	r1, r3, #4
 8000e4a:	6029      	str	r1, [r5, #0]
 8000e4c:	0601      	lsls	r1, r0, #24
 8000e4e:	d501      	bpl.n	8000e54 <_printf_i+0xec>
 8000e50:	681e      	ldr	r6, [r3, #0]
 8000e52:	e002      	b.n	8000e5a <_printf_i+0xf2>
 8000e54:	0646      	lsls	r6, r0, #25
 8000e56:	d5fb      	bpl.n	8000e50 <_printf_i+0xe8>
 8000e58:	881e      	ldrh	r6, [r3, #0]
 8000e5a:	4854      	ldr	r0, [pc, #336]	; (8000fac <_printf_i+0x244>)
 8000e5c:	2f6f      	cmp	r7, #111	; 0x6f
 8000e5e:	bf0c      	ite	eq
 8000e60:	2308      	moveq	r3, #8
 8000e62:	230a      	movne	r3, #10
 8000e64:	2100      	movs	r1, #0
 8000e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e6a:	6865      	ldr	r5, [r4, #4]
 8000e6c:	60a5      	str	r5, [r4, #8]
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	bfa2      	ittt	ge
 8000e72:	6821      	ldrge	r1, [r4, #0]
 8000e74:	f021 0104 	bicge.w	r1, r1, #4
 8000e78:	6021      	strge	r1, [r4, #0]
 8000e7a:	b90e      	cbnz	r6, 8000e80 <_printf_i+0x118>
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d04d      	beq.n	8000f1c <_printf_i+0x1b4>
 8000e80:	4615      	mov	r5, r2
 8000e82:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e86:	fb03 6711 	mls	r7, r3, r1, r6
 8000e8a:	5dc7      	ldrb	r7, [r0, r7]
 8000e8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e90:	4637      	mov	r7, r6
 8000e92:	42bb      	cmp	r3, r7
 8000e94:	460e      	mov	r6, r1
 8000e96:	d9f4      	bls.n	8000e82 <_printf_i+0x11a>
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d10b      	bne.n	8000eb4 <_printf_i+0x14c>
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	07de      	lsls	r6, r3, #31
 8000ea0:	d508      	bpl.n	8000eb4 <_printf_i+0x14c>
 8000ea2:	6923      	ldr	r3, [r4, #16]
 8000ea4:	6861      	ldr	r1, [r4, #4]
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	bfde      	ittt	le
 8000eaa:	2330      	movle	r3, #48	; 0x30
 8000eac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000eb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000eb4:	1b52      	subs	r2, r2, r5
 8000eb6:	6122      	str	r2, [r4, #16]
 8000eb8:	f8cd a000 	str.w	sl, [sp]
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	aa03      	add	r2, sp, #12
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	f7ff fee2 	bl	8000c8c <_printf_common>
 8000ec8:	3001      	adds	r0, #1
 8000eca:	d14c      	bne.n	8000f66 <_printf_i+0x1fe>
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	b004      	add	sp, #16
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	4835      	ldr	r0, [pc, #212]	; (8000fac <_printf_i+0x244>)
 8000ed8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000edc:	6829      	ldr	r1, [r5, #0]
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ee4:	6029      	str	r1, [r5, #0]
 8000ee6:	061d      	lsls	r5, r3, #24
 8000ee8:	d514      	bpl.n	8000f14 <_printf_i+0x1ac>
 8000eea:	07df      	lsls	r7, r3, #31
 8000eec:	bf44      	itt	mi
 8000eee:	f043 0320 	orrmi.w	r3, r3, #32
 8000ef2:	6023      	strmi	r3, [r4, #0]
 8000ef4:	b91e      	cbnz	r6, 8000efe <_printf_i+0x196>
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	f023 0320 	bic.w	r3, r3, #32
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	2310      	movs	r3, #16
 8000f00:	e7b0      	b.n	8000e64 <_printf_i+0xfc>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	2378      	movs	r3, #120	; 0x78
 8000f0c:	4828      	ldr	r0, [pc, #160]	; (8000fb0 <_printf_i+0x248>)
 8000f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f12:	e7e3      	b.n	8000edc <_printf_i+0x174>
 8000f14:	0659      	lsls	r1, r3, #25
 8000f16:	bf48      	it	mi
 8000f18:	b2b6      	uxthmi	r6, r6
 8000f1a:	e7e6      	b.n	8000eea <_printf_i+0x182>
 8000f1c:	4615      	mov	r5, r2
 8000f1e:	e7bb      	b.n	8000e98 <_printf_i+0x130>
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	6826      	ldr	r6, [r4, #0]
 8000f24:	6961      	ldr	r1, [r4, #20]
 8000f26:	1d18      	adds	r0, r3, #4
 8000f28:	6028      	str	r0, [r5, #0]
 8000f2a:	0635      	lsls	r5, r6, #24
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	d501      	bpl.n	8000f34 <_printf_i+0x1cc>
 8000f30:	6019      	str	r1, [r3, #0]
 8000f32:	e002      	b.n	8000f3a <_printf_i+0x1d2>
 8000f34:	0670      	lsls	r0, r6, #25
 8000f36:	d5fb      	bpl.n	8000f30 <_printf_i+0x1c8>
 8000f38:	8019      	strh	r1, [r3, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	6123      	str	r3, [r4, #16]
 8000f3e:	4615      	mov	r5, r2
 8000f40:	e7ba      	b.n	8000eb8 <_printf_i+0x150>
 8000f42:	682b      	ldr	r3, [r5, #0]
 8000f44:	1d1a      	adds	r2, r3, #4
 8000f46:	602a      	str	r2, [r5, #0]
 8000f48:	681d      	ldr	r5, [r3, #0]
 8000f4a:	6862      	ldr	r2, [r4, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f7ff f956 	bl	8000200 <memchr>
 8000f54:	b108      	cbz	r0, 8000f5a <_printf_i+0x1f2>
 8000f56:	1b40      	subs	r0, r0, r5
 8000f58:	6060      	str	r0, [r4, #4]
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	6123      	str	r3, [r4, #16]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f64:	e7a8      	b.n	8000eb8 <_printf_i+0x150>
 8000f66:	6923      	ldr	r3, [r4, #16]
 8000f68:	462a      	mov	r2, r5
 8000f6a:	4649      	mov	r1, r9
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	47d0      	blx	sl
 8000f70:	3001      	adds	r0, #1
 8000f72:	d0ab      	beq.n	8000ecc <_printf_i+0x164>
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	079b      	lsls	r3, r3, #30
 8000f78:	d413      	bmi.n	8000fa2 <_printf_i+0x23a>
 8000f7a:	68e0      	ldr	r0, [r4, #12]
 8000f7c:	9b03      	ldr	r3, [sp, #12]
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	bfb8      	it	lt
 8000f82:	4618      	movlt	r0, r3
 8000f84:	e7a4      	b.n	8000ed0 <_printf_i+0x168>
 8000f86:	2301      	movs	r3, #1
 8000f88:	4632      	mov	r2, r6
 8000f8a:	4649      	mov	r1, r9
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	47d0      	blx	sl
 8000f90:	3001      	adds	r0, #1
 8000f92:	d09b      	beq.n	8000ecc <_printf_i+0x164>
 8000f94:	3501      	adds	r5, #1
 8000f96:	68e3      	ldr	r3, [r4, #12]
 8000f98:	9903      	ldr	r1, [sp, #12]
 8000f9a:	1a5b      	subs	r3, r3, r1
 8000f9c:	42ab      	cmp	r3, r5
 8000f9e:	dcf2      	bgt.n	8000f86 <_printf_i+0x21e>
 8000fa0:	e7eb      	b.n	8000f7a <_printf_i+0x212>
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	f104 0619 	add.w	r6, r4, #25
 8000fa8:	e7f5      	b.n	8000f96 <_printf_i+0x22e>
 8000faa:	bf00      	nop
 8000fac:	0800166d 	.word	0x0800166d
 8000fb0:	0800167e 	.word	0x0800167e

08000fb4 <_sbrk_r>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	4d06      	ldr	r5, [pc, #24]	; (8000fd0 <_sbrk_r+0x1c>)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	f7ff fa1a 	bl	80003f8 <_sbrk>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d102      	bne.n	8000fce <_sbrk_r+0x1a>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	b103      	cbz	r3, 8000fce <_sbrk_r+0x1a>
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	20000090 	.word	0x20000090

08000fd4 <__sread>:
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fdc:	f000 fab2 	bl	8001544 <_read_r>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	bfab      	itete	ge
 8000fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8000fe8:	181b      	addge	r3, r3, r0
 8000fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fee:	bfac      	ite	ge
 8000ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ff2:	81a3      	strhlt	r3, [r4, #12]
 8000ff4:	bd10      	pop	{r4, pc}

08000ff6 <__swrite>:
 8000ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ffa:	461f      	mov	r7, r3
 8000ffc:	898b      	ldrh	r3, [r1, #12]
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	4605      	mov	r5, r0
 8001002:	460c      	mov	r4, r1
 8001004:	4616      	mov	r6, r2
 8001006:	d505      	bpl.n	8001014 <__swrite+0x1e>
 8001008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800100c:	2302      	movs	r3, #2
 800100e:	2200      	movs	r2, #0
 8001010:	f000 f9c8 	bl	80013a4 <_lseek_r>
 8001014:	89a3      	ldrh	r3, [r4, #12]
 8001016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800101a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800101e:	81a3      	strh	r3, [r4, #12]
 8001020:	4632      	mov	r2, r6
 8001022:	463b      	mov	r3, r7
 8001024:	4628      	mov	r0, r5
 8001026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800102a:	f000 b869 	b.w	8001100 <_write_r>

0800102e <__sseek>:
 800102e:	b510      	push	{r4, lr}
 8001030:	460c      	mov	r4, r1
 8001032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001036:	f000 f9b5 	bl	80013a4 <_lseek_r>
 800103a:	1c43      	adds	r3, r0, #1
 800103c:	89a3      	ldrh	r3, [r4, #12]
 800103e:	bf15      	itete	ne
 8001040:	6560      	strne	r0, [r4, #84]	; 0x54
 8001042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800104a:	81a3      	strheq	r3, [r4, #12]
 800104c:	bf18      	it	ne
 800104e:	81a3      	strhne	r3, [r4, #12]
 8001050:	bd10      	pop	{r4, pc}

08001052 <__sclose>:
 8001052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001056:	f000 b8d3 	b.w	8001200 <_close_r>
	...

0800105c <__swbuf_r>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	460e      	mov	r6, r1
 8001060:	4614      	mov	r4, r2
 8001062:	4605      	mov	r5, r0
 8001064:	b118      	cbz	r0, 800106e <__swbuf_r+0x12>
 8001066:	6983      	ldr	r3, [r0, #24]
 8001068:	b90b      	cbnz	r3, 800106e <__swbuf_r+0x12>
 800106a:	f7ff fb81 	bl	8000770 <__sinit>
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <__swbuf_r+0x98>)
 8001070:	429c      	cmp	r4, r3
 8001072:	d12b      	bne.n	80010cc <__swbuf_r+0x70>
 8001074:	686c      	ldr	r4, [r5, #4]
 8001076:	69a3      	ldr	r3, [r4, #24]
 8001078:	60a3      	str	r3, [r4, #8]
 800107a:	89a3      	ldrh	r3, [r4, #12]
 800107c:	071a      	lsls	r2, r3, #28
 800107e:	d52f      	bpl.n	80010e0 <__swbuf_r+0x84>
 8001080:	6923      	ldr	r3, [r4, #16]
 8001082:	b36b      	cbz	r3, 80010e0 <__swbuf_r+0x84>
 8001084:	6923      	ldr	r3, [r4, #16]
 8001086:	6820      	ldr	r0, [r4, #0]
 8001088:	1ac0      	subs	r0, r0, r3
 800108a:	6963      	ldr	r3, [r4, #20]
 800108c:	b2f6      	uxtb	r6, r6
 800108e:	4283      	cmp	r3, r0
 8001090:	4637      	mov	r7, r6
 8001092:	dc04      	bgt.n	800109e <__swbuf_r+0x42>
 8001094:	4621      	mov	r1, r4
 8001096:	4628      	mov	r0, r5
 8001098:	f000 f948 	bl	800132c <_fflush_r>
 800109c:	bb30      	cbnz	r0, 80010ec <__swbuf_r+0x90>
 800109e:	68a3      	ldr	r3, [r4, #8]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	60a3      	str	r3, [r4, #8]
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	6022      	str	r2, [r4, #0]
 80010aa:	701e      	strb	r6, [r3, #0]
 80010ac:	6963      	ldr	r3, [r4, #20]
 80010ae:	3001      	adds	r0, #1
 80010b0:	4283      	cmp	r3, r0
 80010b2:	d004      	beq.n	80010be <__swbuf_r+0x62>
 80010b4:	89a3      	ldrh	r3, [r4, #12]
 80010b6:	07db      	lsls	r3, r3, #31
 80010b8:	d506      	bpl.n	80010c8 <__swbuf_r+0x6c>
 80010ba:	2e0a      	cmp	r6, #10
 80010bc:	d104      	bne.n	80010c8 <__swbuf_r+0x6c>
 80010be:	4621      	mov	r1, r4
 80010c0:	4628      	mov	r0, r5
 80010c2:	f000 f933 	bl	800132c <_fflush_r>
 80010c6:	b988      	cbnz	r0, 80010ec <__swbuf_r+0x90>
 80010c8:	4638      	mov	r0, r7
 80010ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <__swbuf_r+0x9c>)
 80010ce:	429c      	cmp	r4, r3
 80010d0:	d101      	bne.n	80010d6 <__swbuf_r+0x7a>
 80010d2:	68ac      	ldr	r4, [r5, #8]
 80010d4:	e7cf      	b.n	8001076 <__swbuf_r+0x1a>
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <__swbuf_r+0xa0>)
 80010d8:	429c      	cmp	r4, r3
 80010da:	bf08      	it	eq
 80010dc:	68ec      	ldreq	r4, [r5, #12]
 80010de:	e7ca      	b.n	8001076 <__swbuf_r+0x1a>
 80010e0:	4621      	mov	r1, r4
 80010e2:	4628      	mov	r0, r5
 80010e4:	f000 f81e 	bl	8001124 <__swsetup_r>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d0cb      	beq.n	8001084 <__swbuf_r+0x28>
 80010ec:	f04f 37ff 	mov.w	r7, #4294967295
 80010f0:	e7ea      	b.n	80010c8 <__swbuf_r+0x6c>
 80010f2:	bf00      	nop
 80010f4:	0800161c 	.word	0x0800161c
 80010f8:	0800163c 	.word	0x0800163c
 80010fc:	080015fc 	.word	0x080015fc

08001100 <_write_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4d07      	ldr	r5, [pc, #28]	; (8001120 <_write_r+0x20>)
 8001104:	4604      	mov	r4, r0
 8001106:	4608      	mov	r0, r1
 8001108:	4611      	mov	r1, r2
 800110a:	2200      	movs	r2, #0
 800110c:	602a      	str	r2, [r5, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	f7ff f921 	bl	8000356 <_write>
 8001114:	1c43      	adds	r3, r0, #1
 8001116:	d102      	bne.n	800111e <_write_r+0x1e>
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	b103      	cbz	r3, 800111e <_write_r+0x1e>
 800111c:	6023      	str	r3, [r4, #0]
 800111e:	bd38      	pop	{r3, r4, r5, pc}
 8001120:	20000090 	.word	0x20000090

08001124 <__swsetup_r>:
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <__swsetup_r+0xcc>)
 8001126:	b570      	push	{r4, r5, r6, lr}
 8001128:	681d      	ldr	r5, [r3, #0]
 800112a:	4606      	mov	r6, r0
 800112c:	460c      	mov	r4, r1
 800112e:	b125      	cbz	r5, 800113a <__swsetup_r+0x16>
 8001130:	69ab      	ldr	r3, [r5, #24]
 8001132:	b913      	cbnz	r3, 800113a <__swsetup_r+0x16>
 8001134:	4628      	mov	r0, r5
 8001136:	f7ff fb1b 	bl	8000770 <__sinit>
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <__swsetup_r+0xd0>)
 800113c:	429c      	cmp	r4, r3
 800113e:	d10f      	bne.n	8001160 <__swsetup_r+0x3c>
 8001140:	686c      	ldr	r4, [r5, #4]
 8001142:	89a3      	ldrh	r3, [r4, #12]
 8001144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001148:	0719      	lsls	r1, r3, #28
 800114a:	d42c      	bmi.n	80011a6 <__swsetup_r+0x82>
 800114c:	06dd      	lsls	r5, r3, #27
 800114e:	d411      	bmi.n	8001174 <__swsetup_r+0x50>
 8001150:	2309      	movs	r3, #9
 8001152:	6033      	str	r3, [r6, #0]
 8001154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001158:	81a3      	strh	r3, [r4, #12]
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	e03e      	b.n	80011de <__swsetup_r+0xba>
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <__swsetup_r+0xd4>)
 8001162:	429c      	cmp	r4, r3
 8001164:	d101      	bne.n	800116a <__swsetup_r+0x46>
 8001166:	68ac      	ldr	r4, [r5, #8]
 8001168:	e7eb      	b.n	8001142 <__swsetup_r+0x1e>
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <__swsetup_r+0xd8>)
 800116c:	429c      	cmp	r4, r3
 800116e:	bf08      	it	eq
 8001170:	68ec      	ldreq	r4, [r5, #12]
 8001172:	e7e6      	b.n	8001142 <__swsetup_r+0x1e>
 8001174:	0758      	lsls	r0, r3, #29
 8001176:	d512      	bpl.n	800119e <__swsetup_r+0x7a>
 8001178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800117a:	b141      	cbz	r1, 800118e <__swsetup_r+0x6a>
 800117c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001180:	4299      	cmp	r1, r3
 8001182:	d002      	beq.n	800118a <__swsetup_r+0x66>
 8001184:	4630      	mov	r0, r6
 8001186:	f000 f991 	bl	80014ac <_free_r>
 800118a:	2300      	movs	r3, #0
 800118c:	6363      	str	r3, [r4, #52]	; 0x34
 800118e:	89a3      	ldrh	r3, [r4, #12]
 8001190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001194:	81a3      	strh	r3, [r4, #12]
 8001196:	2300      	movs	r3, #0
 8001198:	6063      	str	r3, [r4, #4]
 800119a:	6923      	ldr	r3, [r4, #16]
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	81a3      	strh	r3, [r4, #12]
 80011a6:	6923      	ldr	r3, [r4, #16]
 80011a8:	b94b      	cbnz	r3, 80011be <__swsetup_r+0x9a>
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b4:	d003      	beq.n	80011be <__swsetup_r+0x9a>
 80011b6:	4621      	mov	r1, r4
 80011b8:	4630      	mov	r0, r6
 80011ba:	f000 f92b 	bl	8001414 <__smakebuf_r>
 80011be:	89a0      	ldrh	r0, [r4, #12]
 80011c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011c4:	f010 0301 	ands.w	r3, r0, #1
 80011c8:	d00a      	beq.n	80011e0 <__swsetup_r+0xbc>
 80011ca:	2300      	movs	r3, #0
 80011cc:	60a3      	str	r3, [r4, #8]
 80011ce:	6963      	ldr	r3, [r4, #20]
 80011d0:	425b      	negs	r3, r3
 80011d2:	61a3      	str	r3, [r4, #24]
 80011d4:	6923      	ldr	r3, [r4, #16]
 80011d6:	b943      	cbnz	r3, 80011ea <__swsetup_r+0xc6>
 80011d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011dc:	d1ba      	bne.n	8001154 <__swsetup_r+0x30>
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	0781      	lsls	r1, r0, #30
 80011e2:	bf58      	it	pl
 80011e4:	6963      	ldrpl	r3, [r4, #20]
 80011e6:	60a3      	str	r3, [r4, #8]
 80011e8:	e7f4      	b.n	80011d4 <__swsetup_r+0xb0>
 80011ea:	2000      	movs	r0, #0
 80011ec:	e7f7      	b.n	80011de <__swsetup_r+0xba>
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000
 80011f4:	0800161c 	.word	0x0800161c
 80011f8:	0800163c 	.word	0x0800163c
 80011fc:	080015fc 	.word	0x080015fc

08001200 <_close_r>:
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4d06      	ldr	r5, [pc, #24]	; (800121c <_close_r+0x1c>)
 8001204:	2300      	movs	r3, #0
 8001206:	4604      	mov	r4, r0
 8001208:	4608      	mov	r0, r1
 800120a:	602b      	str	r3, [r5, #0]
 800120c:	f7ff f8bf 	bl	800038e <_close>
 8001210:	1c43      	adds	r3, r0, #1
 8001212:	d102      	bne.n	800121a <_close_r+0x1a>
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	b103      	cbz	r3, 800121a <_close_r+0x1a>
 8001218:	6023      	str	r3, [r4, #0]
 800121a:	bd38      	pop	{r3, r4, r5, pc}
 800121c:	20000090 	.word	0x20000090

08001220 <__sflush_r>:
 8001220:	898a      	ldrh	r2, [r1, #12]
 8001222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001226:	4605      	mov	r5, r0
 8001228:	0710      	lsls	r0, r2, #28
 800122a:	460c      	mov	r4, r1
 800122c:	d458      	bmi.n	80012e0 <__sflush_r+0xc0>
 800122e:	684b      	ldr	r3, [r1, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	dc05      	bgt.n	8001240 <__sflush_r+0x20>
 8001234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	dc02      	bgt.n	8001240 <__sflush_r+0x20>
 800123a:	2000      	movs	r0, #0
 800123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001242:	2e00      	cmp	r6, #0
 8001244:	d0f9      	beq.n	800123a <__sflush_r+0x1a>
 8001246:	2300      	movs	r3, #0
 8001248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800124c:	682f      	ldr	r7, [r5, #0]
 800124e:	602b      	str	r3, [r5, #0]
 8001250:	d032      	beq.n	80012b8 <__sflush_r+0x98>
 8001252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	075a      	lsls	r2, r3, #29
 8001258:	d505      	bpl.n	8001266 <__sflush_r+0x46>
 800125a:	6863      	ldr	r3, [r4, #4]
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001260:	b10b      	cbz	r3, 8001266 <__sflush_r+0x46>
 8001262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001264:	1ac0      	subs	r0, r0, r3
 8001266:	2300      	movs	r3, #0
 8001268:	4602      	mov	r2, r0
 800126a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800126c:	6a21      	ldr	r1, [r4, #32]
 800126e:	4628      	mov	r0, r5
 8001270:	47b0      	blx	r6
 8001272:	1c43      	adds	r3, r0, #1
 8001274:	89a3      	ldrh	r3, [r4, #12]
 8001276:	d106      	bne.n	8001286 <__sflush_r+0x66>
 8001278:	6829      	ldr	r1, [r5, #0]
 800127a:	291d      	cmp	r1, #29
 800127c:	d82c      	bhi.n	80012d8 <__sflush_r+0xb8>
 800127e:	4a2a      	ldr	r2, [pc, #168]	; (8001328 <__sflush_r+0x108>)
 8001280:	40ca      	lsrs	r2, r1
 8001282:	07d6      	lsls	r6, r2, #31
 8001284:	d528      	bpl.n	80012d8 <__sflush_r+0xb8>
 8001286:	2200      	movs	r2, #0
 8001288:	6062      	str	r2, [r4, #4]
 800128a:	04d9      	lsls	r1, r3, #19
 800128c:	6922      	ldr	r2, [r4, #16]
 800128e:	6022      	str	r2, [r4, #0]
 8001290:	d504      	bpl.n	800129c <__sflush_r+0x7c>
 8001292:	1c42      	adds	r2, r0, #1
 8001294:	d101      	bne.n	800129a <__sflush_r+0x7a>
 8001296:	682b      	ldr	r3, [r5, #0]
 8001298:	b903      	cbnz	r3, 800129c <__sflush_r+0x7c>
 800129a:	6560      	str	r0, [r4, #84]	; 0x54
 800129c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800129e:	602f      	str	r7, [r5, #0]
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d0ca      	beq.n	800123a <__sflush_r+0x1a>
 80012a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012a8:	4299      	cmp	r1, r3
 80012aa:	d002      	beq.n	80012b2 <__sflush_r+0x92>
 80012ac:	4628      	mov	r0, r5
 80012ae:	f000 f8fd 	bl	80014ac <_free_r>
 80012b2:	2000      	movs	r0, #0
 80012b4:	6360      	str	r0, [r4, #52]	; 0x34
 80012b6:	e7c1      	b.n	800123c <__sflush_r+0x1c>
 80012b8:	6a21      	ldr	r1, [r4, #32]
 80012ba:	2301      	movs	r3, #1
 80012bc:	4628      	mov	r0, r5
 80012be:	47b0      	blx	r6
 80012c0:	1c41      	adds	r1, r0, #1
 80012c2:	d1c7      	bne.n	8001254 <__sflush_r+0x34>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0c4      	beq.n	8001254 <__sflush_r+0x34>
 80012ca:	2b1d      	cmp	r3, #29
 80012cc:	d001      	beq.n	80012d2 <__sflush_r+0xb2>
 80012ce:	2b16      	cmp	r3, #22
 80012d0:	d101      	bne.n	80012d6 <__sflush_r+0xb6>
 80012d2:	602f      	str	r7, [r5, #0]
 80012d4:	e7b1      	b.n	800123a <__sflush_r+0x1a>
 80012d6:	89a3      	ldrh	r3, [r4, #12]
 80012d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012dc:	81a3      	strh	r3, [r4, #12]
 80012de:	e7ad      	b.n	800123c <__sflush_r+0x1c>
 80012e0:	690f      	ldr	r7, [r1, #16]
 80012e2:	2f00      	cmp	r7, #0
 80012e4:	d0a9      	beq.n	800123a <__sflush_r+0x1a>
 80012e6:	0793      	lsls	r3, r2, #30
 80012e8:	680e      	ldr	r6, [r1, #0]
 80012ea:	bf08      	it	eq
 80012ec:	694b      	ldreq	r3, [r1, #20]
 80012ee:	600f      	str	r7, [r1, #0]
 80012f0:	bf18      	it	ne
 80012f2:	2300      	movne	r3, #0
 80012f4:	eba6 0807 	sub.w	r8, r6, r7
 80012f8:	608b      	str	r3, [r1, #8]
 80012fa:	f1b8 0f00 	cmp.w	r8, #0
 80012fe:	dd9c      	ble.n	800123a <__sflush_r+0x1a>
 8001300:	6a21      	ldr	r1, [r4, #32]
 8001302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001304:	4643      	mov	r3, r8
 8001306:	463a      	mov	r2, r7
 8001308:	4628      	mov	r0, r5
 800130a:	47b0      	blx	r6
 800130c:	2800      	cmp	r0, #0
 800130e:	dc06      	bgt.n	800131e <__sflush_r+0xfe>
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001316:	81a3      	strh	r3, [r4, #12]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	e78e      	b.n	800123c <__sflush_r+0x1c>
 800131e:	4407      	add	r7, r0
 8001320:	eba8 0800 	sub.w	r8, r8, r0
 8001324:	e7e9      	b.n	80012fa <__sflush_r+0xda>
 8001326:	bf00      	nop
 8001328:	20400001 	.word	0x20400001

0800132c <_fflush_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	690b      	ldr	r3, [r1, #16]
 8001330:	4605      	mov	r5, r0
 8001332:	460c      	mov	r4, r1
 8001334:	b913      	cbnz	r3, 800133c <_fflush_r+0x10>
 8001336:	2500      	movs	r5, #0
 8001338:	4628      	mov	r0, r5
 800133a:	bd38      	pop	{r3, r4, r5, pc}
 800133c:	b118      	cbz	r0, 8001346 <_fflush_r+0x1a>
 800133e:	6983      	ldr	r3, [r0, #24]
 8001340:	b90b      	cbnz	r3, 8001346 <_fflush_r+0x1a>
 8001342:	f7ff fa15 	bl	8000770 <__sinit>
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <_fflush_r+0x6c>)
 8001348:	429c      	cmp	r4, r3
 800134a:	d11b      	bne.n	8001384 <_fflush_r+0x58>
 800134c:	686c      	ldr	r4, [r5, #4]
 800134e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0ef      	beq.n	8001336 <_fflush_r+0xa>
 8001356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001358:	07d0      	lsls	r0, r2, #31
 800135a:	d404      	bmi.n	8001366 <_fflush_r+0x3a>
 800135c:	0599      	lsls	r1, r3, #22
 800135e:	d402      	bmi.n	8001366 <_fflush_r+0x3a>
 8001360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001362:	f7ff faa3 	bl	80008ac <__retarget_lock_acquire_recursive>
 8001366:	4628      	mov	r0, r5
 8001368:	4621      	mov	r1, r4
 800136a:	f7ff ff59 	bl	8001220 <__sflush_r>
 800136e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001370:	07da      	lsls	r2, r3, #31
 8001372:	4605      	mov	r5, r0
 8001374:	d4e0      	bmi.n	8001338 <_fflush_r+0xc>
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	059b      	lsls	r3, r3, #22
 800137a:	d4dd      	bmi.n	8001338 <_fflush_r+0xc>
 800137c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800137e:	f7ff fa96 	bl	80008ae <__retarget_lock_release_recursive>
 8001382:	e7d9      	b.n	8001338 <_fflush_r+0xc>
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <_fflush_r+0x70>)
 8001386:	429c      	cmp	r4, r3
 8001388:	d101      	bne.n	800138e <_fflush_r+0x62>
 800138a:	68ac      	ldr	r4, [r5, #8]
 800138c:	e7df      	b.n	800134e <_fflush_r+0x22>
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <_fflush_r+0x74>)
 8001390:	429c      	cmp	r4, r3
 8001392:	bf08      	it	eq
 8001394:	68ec      	ldreq	r4, [r5, #12]
 8001396:	e7da      	b.n	800134e <_fflush_r+0x22>
 8001398:	0800161c 	.word	0x0800161c
 800139c:	0800163c 	.word	0x0800163c
 80013a0:	080015fc 	.word	0x080015fc

080013a4 <_lseek_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	4d07      	ldr	r5, [pc, #28]	; (80013c4 <_lseek_r+0x20>)
 80013a8:	4604      	mov	r4, r0
 80013aa:	4608      	mov	r0, r1
 80013ac:	4611      	mov	r1, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	602a      	str	r2, [r5, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	f7ff f812 	bl	80003dc <_lseek>
 80013b8:	1c43      	adds	r3, r0, #1
 80013ba:	d102      	bne.n	80013c2 <_lseek_r+0x1e>
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	b103      	cbz	r3, 80013c2 <_lseek_r+0x1e>
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	20000090 	.word	0x20000090

080013c8 <__swhatbuf_r>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	460e      	mov	r6, r1
 80013cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d0:	2900      	cmp	r1, #0
 80013d2:	b096      	sub	sp, #88	; 0x58
 80013d4:	4614      	mov	r4, r2
 80013d6:	461d      	mov	r5, r3
 80013d8:	da08      	bge.n	80013ec <__swhatbuf_r+0x24>
 80013da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	602a      	str	r2, [r5, #0]
 80013e2:	061a      	lsls	r2, r3, #24
 80013e4:	d410      	bmi.n	8001408 <__swhatbuf_r+0x40>
 80013e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ea:	e00e      	b.n	800140a <__swhatbuf_r+0x42>
 80013ec:	466a      	mov	r2, sp
 80013ee:	f000 f8bb 	bl	8001568 <_fstat_r>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	dbf1      	blt.n	80013da <__swhatbuf_r+0x12>
 80013f6:	9a01      	ldr	r2, [sp, #4]
 80013f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001400:	425a      	negs	r2, r3
 8001402:	415a      	adcs	r2, r3
 8001404:	602a      	str	r2, [r5, #0]
 8001406:	e7ee      	b.n	80013e6 <__swhatbuf_r+0x1e>
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	2000      	movs	r0, #0
 800140c:	6023      	str	r3, [r4, #0]
 800140e:	b016      	add	sp, #88	; 0x58
 8001410:	bd70      	pop	{r4, r5, r6, pc}
	...

08001414 <__smakebuf_r>:
 8001414:	898b      	ldrh	r3, [r1, #12]
 8001416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001418:	079d      	lsls	r5, r3, #30
 800141a:	4606      	mov	r6, r0
 800141c:	460c      	mov	r4, r1
 800141e:	d507      	bpl.n	8001430 <__smakebuf_r+0x1c>
 8001420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001424:	6023      	str	r3, [r4, #0]
 8001426:	6123      	str	r3, [r4, #16]
 8001428:	2301      	movs	r3, #1
 800142a:	6163      	str	r3, [r4, #20]
 800142c:	b002      	add	sp, #8
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	ab01      	add	r3, sp, #4
 8001432:	466a      	mov	r2, sp
 8001434:	f7ff ffc8 	bl	80013c8 <__swhatbuf_r>
 8001438:	9900      	ldr	r1, [sp, #0]
 800143a:	4605      	mov	r5, r0
 800143c:	4630      	mov	r0, r6
 800143e:	f7ff fa57 	bl	80008f0 <_malloc_r>
 8001442:	b948      	cbnz	r0, 8001458 <__smakebuf_r+0x44>
 8001444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001448:	059a      	lsls	r2, r3, #22
 800144a:	d4ef      	bmi.n	800142c <__smakebuf_r+0x18>
 800144c:	f023 0303 	bic.w	r3, r3, #3
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	81a3      	strh	r3, [r4, #12]
 8001456:	e7e3      	b.n	8001420 <__smakebuf_r+0xc>
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <__smakebuf_r+0x7c>)
 800145a:	62b3      	str	r3, [r6, #40]	; 0x28
 800145c:	89a3      	ldrh	r3, [r4, #12]
 800145e:	6020      	str	r0, [r4, #0]
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	81a3      	strh	r3, [r4, #12]
 8001466:	9b00      	ldr	r3, [sp, #0]
 8001468:	6163      	str	r3, [r4, #20]
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	6120      	str	r0, [r4, #16]
 800146e:	b15b      	cbz	r3, 8001488 <__smakebuf_r+0x74>
 8001470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001474:	4630      	mov	r0, r6
 8001476:	f000 f889 	bl	800158c <_isatty_r>
 800147a:	b128      	cbz	r0, 8001488 <__smakebuf_r+0x74>
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	89a0      	ldrh	r0, [r4, #12]
 800148a:	4305      	orrs	r5, r0
 800148c:	81a5      	strh	r5, [r4, #12]
 800148e:	e7cd      	b.n	800142c <__smakebuf_r+0x18>
 8001490:	08000709 	.word	0x08000709

08001494 <__malloc_lock>:
 8001494:	4801      	ldr	r0, [pc, #4]	; (800149c <__malloc_lock+0x8>)
 8001496:	f7ff ba09 	b.w	80008ac <__retarget_lock_acquire_recursive>
 800149a:	bf00      	nop
 800149c:	20000084 	.word	0x20000084

080014a0 <__malloc_unlock>:
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <__malloc_unlock+0x8>)
 80014a2:	f7ff ba04 	b.w	80008ae <__retarget_lock_release_recursive>
 80014a6:	bf00      	nop
 80014a8:	20000084 	.word	0x20000084

080014ac <_free_r>:
 80014ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014ae:	2900      	cmp	r1, #0
 80014b0:	d044      	beq.n	800153c <_free_r+0x90>
 80014b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014b6:	9001      	str	r0, [sp, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f1a1 0404 	sub.w	r4, r1, #4
 80014be:	bfb8      	it	lt
 80014c0:	18e4      	addlt	r4, r4, r3
 80014c2:	f7ff ffe7 	bl	8001494 <__malloc_lock>
 80014c6:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <_free_r+0x94>)
 80014c8:	9801      	ldr	r0, [sp, #4]
 80014ca:	6813      	ldr	r3, [r2, #0]
 80014cc:	b933      	cbnz	r3, 80014dc <_free_r+0x30>
 80014ce:	6063      	str	r3, [r4, #4]
 80014d0:	6014      	str	r4, [r2, #0]
 80014d2:	b003      	add	sp, #12
 80014d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80014d8:	f7ff bfe2 	b.w	80014a0 <__malloc_unlock>
 80014dc:	42a3      	cmp	r3, r4
 80014de:	d908      	bls.n	80014f2 <_free_r+0x46>
 80014e0:	6825      	ldr	r5, [r4, #0]
 80014e2:	1961      	adds	r1, r4, r5
 80014e4:	428b      	cmp	r3, r1
 80014e6:	bf01      	itttt	eq
 80014e8:	6819      	ldreq	r1, [r3, #0]
 80014ea:	685b      	ldreq	r3, [r3, #4]
 80014ec:	1949      	addeq	r1, r1, r5
 80014ee:	6021      	streq	r1, [r4, #0]
 80014f0:	e7ed      	b.n	80014ce <_free_r+0x22>
 80014f2:	461a      	mov	r2, r3
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	b10b      	cbz	r3, 80014fc <_free_r+0x50>
 80014f8:	42a3      	cmp	r3, r4
 80014fa:	d9fa      	bls.n	80014f2 <_free_r+0x46>
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	1855      	adds	r5, r2, r1
 8001500:	42a5      	cmp	r5, r4
 8001502:	d10b      	bne.n	800151c <_free_r+0x70>
 8001504:	6824      	ldr	r4, [r4, #0]
 8001506:	4421      	add	r1, r4
 8001508:	1854      	adds	r4, r2, r1
 800150a:	42a3      	cmp	r3, r4
 800150c:	6011      	str	r1, [r2, #0]
 800150e:	d1e0      	bne.n	80014d2 <_free_r+0x26>
 8001510:	681c      	ldr	r4, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	6053      	str	r3, [r2, #4]
 8001516:	4421      	add	r1, r4
 8001518:	6011      	str	r1, [r2, #0]
 800151a:	e7da      	b.n	80014d2 <_free_r+0x26>
 800151c:	d902      	bls.n	8001524 <_free_r+0x78>
 800151e:	230c      	movs	r3, #12
 8001520:	6003      	str	r3, [r0, #0]
 8001522:	e7d6      	b.n	80014d2 <_free_r+0x26>
 8001524:	6825      	ldr	r5, [r4, #0]
 8001526:	1961      	adds	r1, r4, r5
 8001528:	428b      	cmp	r3, r1
 800152a:	bf04      	itt	eq
 800152c:	6819      	ldreq	r1, [r3, #0]
 800152e:	685b      	ldreq	r3, [r3, #4]
 8001530:	6063      	str	r3, [r4, #4]
 8001532:	bf04      	itt	eq
 8001534:	1949      	addeq	r1, r1, r5
 8001536:	6021      	streq	r1, [r4, #0]
 8001538:	6054      	str	r4, [r2, #4]
 800153a:	e7ca      	b.n	80014d2 <_free_r+0x26>
 800153c:	b003      	add	sp, #12
 800153e:	bd30      	pop	{r4, r5, pc}
 8001540:	20000088 	.word	0x20000088

08001544 <_read_r>:
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4d07      	ldr	r5, [pc, #28]	; (8001564 <_read_r+0x20>)
 8001548:	4604      	mov	r4, r0
 800154a:	4608      	mov	r0, r1
 800154c:	4611      	mov	r1, r2
 800154e:	2200      	movs	r2, #0
 8001550:	602a      	str	r2, [r5, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	f7fe fee2 	bl	800031c <_read>
 8001558:	1c43      	adds	r3, r0, #1
 800155a:	d102      	bne.n	8001562 <_read_r+0x1e>
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	b103      	cbz	r3, 8001562 <_read_r+0x1e>
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	bd38      	pop	{r3, r4, r5, pc}
 8001564:	20000090 	.word	0x20000090

08001568 <_fstat_r>:
 8001568:	b538      	push	{r3, r4, r5, lr}
 800156a:	4d07      	ldr	r5, [pc, #28]	; (8001588 <_fstat_r+0x20>)
 800156c:	2300      	movs	r3, #0
 800156e:	4604      	mov	r4, r0
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	602b      	str	r3, [r5, #0]
 8001576:	f7fe ff16 	bl	80003a6 <_fstat>
 800157a:	1c43      	adds	r3, r0, #1
 800157c:	d102      	bne.n	8001584 <_fstat_r+0x1c>
 800157e:	682b      	ldr	r3, [r5, #0]
 8001580:	b103      	cbz	r3, 8001584 <_fstat_r+0x1c>
 8001582:	6023      	str	r3, [r4, #0]
 8001584:	bd38      	pop	{r3, r4, r5, pc}
 8001586:	bf00      	nop
 8001588:	20000090 	.word	0x20000090

0800158c <_isatty_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d06      	ldr	r5, [pc, #24]	; (80015a8 <_isatty_r+0x1c>)
 8001590:	2300      	movs	r3, #0
 8001592:	4604      	mov	r4, r0
 8001594:	4608      	mov	r0, r1
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	f7fe ff15 	bl	80003c6 <_isatty>
 800159c:	1c43      	adds	r3, r0, #1
 800159e:	d102      	bne.n	80015a6 <_isatty_r+0x1a>
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	b103      	cbz	r3, 80015a6 <_isatty_r+0x1a>
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
 80015a8:	20000090 	.word	0x20000090

080015ac <_init>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	bf00      	nop
 80015b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b2:	bc08      	pop	{r3}
 80015b4:	469e      	mov	lr, r3
 80015b6:	4770      	bx	lr

080015b8 <_fini>:
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	bf00      	nop
 80015bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015be:	bc08      	pop	{r3}
 80015c0:	469e      	mov	lr, r3
 80015c2:	4770      	bx	lr
